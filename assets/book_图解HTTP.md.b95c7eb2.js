import{_ as a,v as t,b as e,R as r}from"./chunks/framework.caa0fbaf.js";const P=JSON.parse('{"title":"图解 HTTP","description":"","frontmatter":{},"headers":[],"relativePath":"book/图解HTTP.md","filePath":"book/图解HTTP.md","lastUpdated":1692205004000}'),o={name:"book/图解HTTP.md"},l=r('<h1 id="my-anchor" tabindex="-1">图解 HTTP <a class="header-anchor" href="#my-anchor" aria-label="Permalink to &quot;图解 HTTP&quot;">​</a></h1><h2 id="my-anchor-1" tabindex="-1">第一章 了解 web 及网络基础 <a class="header-anchor" href="#my-anchor-1" aria-label="Permalink to &quot;第一章 了解 web 及网络基础&quot;">​</a></h2><h3 id="my-anchor-2" tabindex="-1">TCP/IP 的分层 <a class="header-anchor" href="#my-anchor-2" aria-label="Permalink to &quot;TCP/IP 的分层&quot;">​</a></h3><ul><li><p>应用层</p><p>应用层决定了向用户提供应用服务时通信的活动；</p><p>FTP（File Transfer Protocol，文件传输协议）和 DNS（Domain Name System，域 名系统）服务就是其中两类。 HTTP 协议也处于该层。</p></li><li><p>传输层</p><p>传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据 传输。</p><p>TCP（Transmission Control Protocol，传输控制协议）和 UDP（User Data Protocol，用户数据报 协议）。</p></li><li><p>网络层</p><p>网络层用来处理在网络上流动的数据包。</p></li><li><p>链路层</p><p>用来处理连接网络的硬件部分。包括控制操作系统、硬件的设备驱 动、NIC（Network Interface Card，网络适配器，即网卡），及光纤等 物理可见部分（还包括连接器等一切传输媒介）。</p></li></ul><h3 id="my-anchor-3" tabindex="-1">HTTP 关系密切的协议：IP、TCP、DNS <a class="header-anchor" href="#my-anchor-3" aria-label="Permalink to &quot;HTTP 关系密切的协议：IP、TCP、DNS&quot;">​</a></h3><ul><li><p>IP 协议：作用是把各种数据包传送给对方。</p></li><li><p>IP 地址：指明节点被分配到的地址，MAC 地址是指网卡所属的固定地址。</p></li><li><p>TCP：位于传输层，提供可靠的字节流服务</p><p>字节流服务：为了方便传输，将大块数据分割成报文段(segment）进行传输。</p><p>可靠：通过三次握手策略，保证通信的可靠。</p></li><li><p>DNS：负责域名的 DNS 服务；位于应用层；提供域名到 IP 地址之间的解析。</p></li></ul><h3 id="my-anchor-4" tabindex="-1">URI 与 URL <a class="header-anchor" href="#my-anchor-4" aria-label="Permalink to &quot;URI 与 URL&quot;">​</a></h3><ul><li>URI：由某个协议方案表示的资源的定位标识符；http、ftp、mailto、telnet、file等协议。</li><li>URL：正常理解的 web 浏览器访问的地址；url 是 uri 的子集。</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">http://abc.com:80/home/index.html?a=one&amp;b=two#boom</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol><li>http 协议类型：http、ftp、mailto、telnet、file。</li><li>abc.com 服务器地址</li><li>80 端口号</li><li>/home/index.html/ 文件路径</li><li>?a=one&amp;b=two 查询字符串</li><li>#boom 片段标识符：一般用来定位网页上的内容，还有前端的单页应用。</li></ol><h2 id="my-anchor-5" tabindex="-1">第二章 简单的 HTTP 协议 <a class="header-anchor" href="#my-anchor-5" aria-label="Permalink to &quot;第二章 简单的 HTTP 协议&quot;">​</a></h2><h2 id="my-anchor-6" tabindex="-1">第四章 HTTP 状态码 <a class="header-anchor" href="#my-anchor-6" aria-label="Permalink to &quot;第四章 HTTP 状态码&quot;">​</a></h2><table><thead><tr><th></th><th>类别</th><th>原因短语</th></tr></thead><tbody><tr><td>1XX</td><td>informational 信息性状态码</td><td>接收的请求正在处理</td></tr><tr><td>2XX</td><td>Success 成功状态码</td><td>请求正常处理完毕3</td></tr><tr><td>3XX</td><td>Redirection 重定向状态码</td><td>需要进行附加操作以完成请求</td></tr><tr><td>4XX</td><td>Client Error 客户端错误状态码</td><td>服务器无法处理</td></tr><tr><td>5XX</td><td>Server Error 服务器错误状态码</td><td>服务器处理请求出错</td></tr></tbody></table><h2 id="my-anchor-7" tabindex="-1">第五章 与 HTTP 协作的 Web 服务器 <a class="header-anchor" href="#my-anchor-7" aria-label="Permalink to &quot;第五章 与 HTTP 协作的 Web 服务器&quot;">​</a></h2><h3 id="my-anchor-8" tabindex="-1">代理 <a class="header-anchor" href="#my-anchor-8" aria-label="Permalink to &quot;代理&quot;">​</a></h3><p>服务器与客户端转发的中间人；使用缓存，或修改报文。</p><p>缓存代理：会保存副本</p><p>透明代理：转发是不对报文进行任何加工的代理</p><h3 id="my-anchor-9" tabindex="-1">网关 <a class="header-anchor" href="#my-anchor-9" aria-label="Permalink to &quot;网关&quot;">​</a></h3><p>能使通信路上的服务器提供非 HTTP 协议服务</p><h3 id="my-anchor-10" tabindex="-1">隧道 <a class="header-anchor" href="#my-anchor-10" aria-label="Permalink to &quot;隧道&quot;">​</a></h3><h2 id="my-anchor-11" tabindex="-1">第六章 首部 <a class="header-anchor" href="#my-anchor-11" aria-label="Permalink to &quot;第六章 首部&quot;">​</a></h2>',22),i=[l];function n(h,d,s,c,p,m){return t(),e("div",null,i)}const u=a(o,[["render",n]]);export{P as __pageData,u as default};
