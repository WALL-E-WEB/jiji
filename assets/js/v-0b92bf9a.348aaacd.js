"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7346],{9862:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-0b92bf9a",path:"/study/10.Vue/VUE3.html",title:"Vue3.0",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"vue3特点",slug:"vue3特点",children:[]},{level:2,title:"Proxy Reflect",slug:"proxy-reflect",children:[]},{level:2,title:"Ref toRef toRefs",slug:"ref-toref-torefs",children:[{level:3,title:"Ref Reactive",slug:"ref-reactive",children:[]},{level:3,title:"toRef",slug:"toref",children:[]},{level:3,title:"toRefs",slug:"torefs",children:[]}]},{level:2,title:"watch",slug:"watch",children:[]},{level:2,title:"script setup",slug:"script-setup",children:[{level:3,title:"props",slug:"props",children:[]},{level:3,title:"emit",slug:"emit",children:[]}]},{level:2,title:"数组声明",slug:"数组声明",children:[]}],filePathRelative:"study/10.Vue/VUE3.md",git:{updatedTime:1647944503e3}}},4296:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="vue3-0" tabindex="-1"><a class="header-anchor" href="#vue3-0" aria-hidden="true">#</a> Vue3.0</h1><h2 id="vue3特点" tabindex="-1"><a class="header-anchor" href="#vue3特点" aria-hidden="true">#</a> vue3特点</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">1.</span>改用Proxy实现响应式<span class="token punctuation">;</span> proxy取代Object<span class="token punctuation">.</span>deFineProperty<span class="token punctuation">;</span>\n<span class="token number">2.</span>compositionApi<span class="token operator">:</span>可以将同一个功能的逻辑，组织在一个函数内部，利于维护。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="proxy-reflect" tabindex="-1"><a class="header-anchor" href="#proxy-reflect" aria-hidden="true">#</a> Proxy Reflect</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">1.</span>在深度监听，性能更好：\n\t Object<span class="token punctuation">.</span>defineProperty： 深度监听需要一次性递归；\n\t Proxy：递归实现深度监听，但是是在<span class="token keyword">get</span>时递归的；\n<span class="token number">2.</span>可以监听 新增<span class="token operator">/</span>删除 属性：\n\t\tObject<span class="token punctuation">.</span>defineProperty：<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>；\n\t\tProxy：新增触发<span class="token keyword">set</span>，删除触发deleteProperty<span class="token punctuation">;</span>\n<span class="token number">3.</span>可监听数组变化：\n\t\tObject<span class="token punctuation">.</span>defineProperty：重写数组方法，实现监听；\n\t\tProxy：新增触发<span class="token keyword">get</span>、<span class="token keyword">set</span>，删除触发deleteProperty<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="ref-toref-torefs" tabindex="-1"><a class="header-anchor" href="#ref-toref-torefs" aria-hidden="true">#</a> Ref toRef toRefs</h2><h3 id="ref-reactive" tabindex="-1"><a class="header-anchor" href="#ref-reactive" aria-hidden="true">#</a> Ref Reactive</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n用于创建简单类型的响应式对象\n用来定义对象数组的响应式\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="toref" tabindex="-1"><a class="header-anchor" href="#toref" aria-hidden="true">#</a> toRef</h3><p>https://v3.cn.vuejs.org/api/refs-api.html#toref</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>toRef是对ref数据的引用\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="torefs" tabindex="-1"><a class="header-anchor" href="#torefs" aria-hidden="true">#</a> toRefs</h3><p>https://v3.cn.vuejs.org/api/refs-api.html#torefs</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>防止解构失去响应式；\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="watch" tabindex="-1"><a class="header-anchor" href="#watch" aria-hidden="true">#</a> watch</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token function">watch</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token string">&#39;改变&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token function">watch</span><span class="token punctuation">(</span>\n  <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>reactive<span class="token punctuation">.</span>name<span class="token punctuation">,</span> \n  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token string">&#39;改变&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n\n<span class="token function">watch</span><span class="token punctuation">(</span>\n  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> props<span class="token punctuation">.</span>total<span class="token punctuation">,</span>\n  <span class="token punctuation">(</span>count<span class="token punctuation">,</span> prevCount<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  \t<span class="token comment">/// ...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="script-setup" tabindex="-1"><a class="header-anchor" href="#script-setup" aria-hidden="true">#</a> script setup</h2><p>https://v3.cn.vuejs.org/api/sfc-script-setup.html#%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">&quot;ts&quot;</span><span class="token operator">&gt;</span>\n\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="props" tabindex="-1"><a class="header-anchor" href="#props" aria-hidden="true">#</a> props</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  pageIndex<span class="token operator">:</span> <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> Number<span class="token punctuation">,</span>\n    required<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  pageSize<span class="token operator">:</span>Number\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>watch props</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>  watch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token function">watch</span><span class="token punctuation">(</span>\n  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> props<span class="token punctuation">.</span>total<span class="token punctuation">,</span>\n  <span class="token punctuation">(</span>count<span class="token punctuation">,</span> prevCount<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">!=</span> prevCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      total<span class="token punctuation">.</span>value <span class="token operator">=</span> count <span class="token operator">?</span> count <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="emit" tabindex="-1"><a class="header-anchor" href="#emit" aria-hidden="true">#</a> emit</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token string">&quot;update:pageIndex&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 声明自定义 model</span>\n  <span class="token string">&quot;update:pageSize&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 声明自定义 model</span>\n  <span class="token string">&quot;page-change&quot;</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;update:pageSize&quot;</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;page-change&quot;</span><span class="token punctuation">,</span> pageIndex<span class="token punctuation">.</span>value<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>自定义v-model</strong> 使用</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token operator">&lt;</span>TableWrap\n      v<span class="token operator">-</span>model<span class="token operator">:</span>pageIndex<span class="token operator">=</span><span class="token string">&quot;params.pageIndex&quot;</span>\n      v<span class="token operator">-</span>model<span class="token operator">:</span>pageSize<span class="token operator">=</span><span class="token string">&quot;params.pageSize&quot;</span>\n      <span class="token decorator"><span class="token at operator">@</span><span class="token function">page</span></span><span class="token operator">-</span>change<span class="token operator">=</span><span class="token string">&quot;onPageChange&quot;</span>\n      <span class="token operator">:</span>total<span class="token operator">=</span><span class="token string">&quot;totalCountRef&quot;</span>\n    <span class="token operator">&gt;</span> \n    <span class="token comment">///....</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="数组声明" tabindex="-1"><a class="header-anchor" href="#数组声明" aria-hidden="true">#</a> 数组声明</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">&quot;ts&quot;</span><span class="token operator">&gt;</span>\n<span class="token keyword">let</span> tableDataRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> tableDataRef2 <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\n\t\t<span class="token keyword">let</span>  newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t\ttableDataRef<span class="token punctuation">.</span>value <span class="token operator">=</span> newArr<span class="token punctuation">;</span>\n\t\ttableDataRef2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',29),e={},t=(0,a(3744).Z)(e,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);