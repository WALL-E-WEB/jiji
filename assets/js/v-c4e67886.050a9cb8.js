"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[83],{4662:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-c4e67886",path:"/study/19.Flutter/Getx.html",title:"Getx",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"obs",slug:"obs",children:[]},{level:2,title:"视图",slug:"视图",children:[{level:3,title:"GetView",slug:"getview",children:[]},{level:3,title:"GetWidget",slug:"getwidget",children:[]}]},{level:2,title:"Bindings",slug:"bindings",children:[]},{level:2,title:"Worker",slug:"worker",children:[]},{level:2,title:"util",slug:"util",children:[]}],filePathRelative:"study/19.Flutter/Getx.md",git:{updatedTime:1644400324e3}}},6291:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h1 id="getx" tabindex="-1"><a class="header-anchor" href="#getx" aria-hidden="true">#</a> Getx</h1><p>https://github.com/jonataslaw/getx/blob/master/README.zh-cn.md</p><h2 id="obs" tabindex="-1"><a class="header-anchor" href="#obs" aria-hidden="true">#</a> obs</h2><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token keyword">final</span> name <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>obs<span class="token punctuation">;</span>\n<span class="token keyword">final</span> isLogged <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">.</span>obs<span class="token punctuation">;</span>\n<span class="token keyword">final</span> count <span class="token operator">=</span> <span class="token number">0.</span>obs<span class="token punctuation">;</span>\n<span class="token keyword">final</span> balance <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">.</span>obs<span class="token punctuation">;</span>\n<span class="token keyword">final</span> number <span class="token operator">=</span> <span class="token number">0.</span>obs<span class="token punctuation">;</span>\n<span class="token keyword">final</span> items <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>obs<span class="token punctuation">;</span>\n<span class="token keyword">final</span> myMap <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> int<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>obs<span class="token punctuation">;</span>\n\n<span class="token comment">// 自定义类 - 可以是任何类</span>\n<span class="token keyword">final</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>obs<span class="token punctuation">;</span>\n\n<span class="token keyword">final</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">.</span>obs<span class="token punctuation">;</span>\n\t<span class="token comment">// 在真/假之间切换数值</span>\n\tflag<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token comment">// 将 &quot;value &quot;设为空。</span>\n\tflag<span class="token punctuation">.</span><span class="token function">nil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">final</span> abc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>obs<span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> name<span class="token punctuation">,</span> last<span class="token punctuation">;</span>\n    int age<span class="token punctuation">;</span>\n    <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>last<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token metadata symbol">@override</span>\n    <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">&#39;$name $last, $age years old&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">final</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> last<span class="token punctuation">:</span> <span class="token string">&#39;Doe&#39;</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">.</span>obs<span class="token punctuation">;</span>\n\n  <span class="token comment">// `user`是 &quot;响应式 &quot;的，但里面的属性却不是!</span>\n  <span class="token comment">// 所以，如果我们改变其中的一些变量：</span>\n  user<span class="token punctuation">.</span>value<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Roi&#39;</span><span class="token punctuation">;</span>\n  <span class="token comment">// 小部件不会重建！ </span>\n  <span class="token comment">// 对于自定义类，我们需要手动 &quot;通知 &quot;改变。</span>\n  user<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 或者我们可以使用`update()`方法!</span>\n  user<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    value<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">&#39;Roi&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h2 id="视图" tabindex="-1"><a class="header-anchor" href="#视图" aria-hidden="true">#</a> 视图</h2><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token comment">// 写法1 </span>\n  <span class="token class-name">Obx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">&#39;${logic.count}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// 写法2</span>\n<span class="token class-name">GetBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TestLogic</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n        id<span class="token punctuation">:</span> <span class="token string">&#39;TestLogic&#39;</span><span class="token punctuation">,</span>\n        init<span class="token punctuation">:</span> <span class="token class-name">TestLogic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>logic<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token class-name">ListView</span><span class="token punctuation">(</span>\n            children<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n              <span class="token class-name">Container</span><span class="token punctuation">(</span>\n                child<span class="token punctuation">:</span> <span class="token class-name">Obx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">&#39;${logic.cout.value}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n              <span class="token punctuation">)</span><span class="token punctuation">,</span>\n              <span class="token class-name">ElevatedButton</span><span class="token punctuation">(</span>\n                  onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    logic<span class="token punctuation">.</span>cout<span class="token punctuation">.</span>value <span class="token operator">=</span> logic<span class="token punctuation">.</span>cout<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n                  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                  child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">]</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token comment">// 写法3</span>\n<span class="token class-name">GetX</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TestLogic</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n            init<span class="token punctuation">:</span> <span class="token class-name">TestLogic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>controller<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;count 3 rebuild&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token keyword">return</span> <span class="token class-name">TextButton</span><span class="token punctuation">(</span>\n                  onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    controller<span class="token punctuation">.</span>cout<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>\n                  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                  child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">&#39;${controller.cout.value}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h3 id="getview" tabindex="-1"><a class="header-anchor" href="#getview" aria-hidden="true">#</a> GetView</h3><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">GetPage</span> <span class="token keyword">extends</span> <span class="token class-name">GetView</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyController</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n\t\n  <span class="token metadata symbol">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 注册</span>\n    \t<span class="token class-name">Get</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">MyController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \t<span class="token keyword">return</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">&#39;${controller.count}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="getwidget" tabindex="-1"><a class="header-anchor" href="#getwidget" aria-hidden="true">#</a> GetWidget</h3><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="bindings" tabindex="-1"><a class="header-anchor" href="#bindings" aria-hidden="true">#</a> Bindings</h2><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">HomeBinding</span> <span class="token keyword">implements</span> <span class="token class-name">Bindings</span> <span class="token punctuation">{</span>\n  <span class="token metadata symbol">@override</span>\n  <span class="token keyword">void</span> <span class="token function">dependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Get</span><span class="token punctuation">.</span>lazyPut<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HomeController</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">HomeController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Get</span><span class="token punctuation">.</span>put<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Service</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Api</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="worker" tabindex="-1"><a class="header-anchor" href="#worker" aria-hidden="true">#</a> Worker</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>onInit中使用;\n\never(litnersval,(val){});\nonce(litnersval,(val){});\neverAll\n\n/// 防抖 等待3秒后触发\ndebounce(litnersval,(val){},time:Duration(seconds:3));\n/// 节流 3秒只触发一次\ninterval(litnersval,(val){},time:Duration(seconds:3));\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="util" tabindex="-1"><a class="header-anchor" href="#util" aria-hidden="true">#</a> util</h2><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token comment">// 改变主题</span>\n<span class="token class-name">Get</span><span class="token punctuation">.</span><span class="token function">changeTheme</span><span class="token punctuation">(</span><span class="token class-name">ThemeData</span><span class="token punctuation">.</span><span class="token function">light</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',16),t={},e=(0,a(3744).Z)(t,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);