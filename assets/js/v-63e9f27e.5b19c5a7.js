"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1365],{3379:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-63e9f27e",path:"/study/21.Ios/ios.html",title:"ios",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"遍历",slug:"遍历",children:[{level:3,title:"for in",slug:"for-in",children:[]}]}],filePathRelative:"study/21.Ios/ios.md",git:{updatedTime:1653231492e3}}},162:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h1 id="ios" tabindex="-1"><a class="header-anchor" href="#ios" aria-hidden="true">#</a> ios</h1><p>https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html</p><h2 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历" aria-hidden="true">#</a> 遍历</h2><h3 id="for-in" tabindex="-1"><a class="header-anchor" href="#for-in" aria-hidden="true">#</a> for in</h3><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">5</span> <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">index</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Anna&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Alex&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Brian&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Jack&quot;</span></span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> count <span class="token operator">=</span> names<span class="token punctuation">.</span>count\n<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..&lt;</span>count <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">names<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">...</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">[</span><span class="token operator">...</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">[</span><span class="token operator">..&lt;</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div>',5),t={},e=(0,a(3744).Z)(t,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);