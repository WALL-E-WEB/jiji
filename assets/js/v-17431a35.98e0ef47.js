"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9102],{7063:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-17431a35",path:"/study/9.Node/koa.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:3,title:"一、 简介",slug:"一、-简介",children:[]},{level:3,title:"二、 之hello world",slug:"二、-之hello-world",children:[]},{level:3,title:"三、服务器自动重新部署",slug:"三、服务器自动重新部署",children:[]},{level:3,title:"四、Koa中间件",slug:"四、koa中间件",children:[]},{level:3,title:"五、Koa路由配置",slug:"五、koa路由配置",children:[]},{level:3,title:"六、设置静态目录",slug:"六、设置静态目录",children:[]},{level:3,title:"七、使用模板引擎",slug:"七、使用模板引擎",children:[]},{level:3,title:"八、Vue SSR（vue服务器渲染）",slug:"八、vue-ssr-vue服务器渲染",children:[]},{level:3,title:"九、 跨域设置",slug:"九、-跨域设置",children:[]}],filePathRelative:"study/9.Node/koa.md",git:{updatedTime:1639555747e3}}},2771:(n,s,a)=>{a.r(s),a.d(s,{default:()=>g});var p=a(6252);const t=(0,p._)("h3",{id:"一、-简介",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#一、-简介","aria-hidden":"true"},"#"),(0,p.Uk)(" 一、"),(0,p._)("img",{src:"https://math.jianshu.com/math?formula=\\color{red}{Koa}",alt:"\\color{red}{Koa}"}),(0,p.Uk)(" 简介")],-1),e=(0,p.Uk)("文档地址："),o={href:"https://links.jianshu.com/go?to=https%3A%2F%2Fkoa.bootcss.com%2F",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Uk)("https://koa.bootcss.com"),c=(0,p.uE)('<p>​ <img src="https://math.jianshu.com/math?formula=\\color{red}{Koa}" alt="\\color{red}{Koa}"> 是一个新的 web 框架，由 Express 幕后的原班人马打造， 致力于成为 web 应用和 API 开发领域中的一个更小、更富有表现力、更健壮的基石。 通过利用 async 函数，Koa 帮你丢弃回调函数，并有力地增强错误处理。 Koa 并没有捆绑任何中间件， 而是提供了一套优雅的方法，帮助您快速而愉快地编写服务端应用程序。</p><h3 id="二、-之hello-world" tabindex="-1"><a class="header-anchor" href="#二、-之hello-world" aria-hidden="true">#</a> 二、<img src="https://math.jianshu.com/math?formula=\\color{red}{Koa}" alt="\\color{red}{Koa}"> 之hello world</h3><ul><li><strong>（1）新建koa-demo文件夹，初始化package.json</strong></li></ul><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code>      npm <span class="token keyword">init</span> <span class="token operator">-</span>y\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><strong>（2）安装Koa模块</strong></li></ul><div class="language-undefined ext-undefined line-numbers-mode"><pre class="language-undefined"><code>      npm i koa -S\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><strong>（3）在项目根目录新建app.js，app.js代码如下：</strong></li></ul><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code>    <span class="token comment">// 导入koa模块</span>\n    <span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 创建koa的实例app</span>\n    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&quot;Hello World&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token comment">// 监听端口</span>\n    app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;服务器已启动，http://localhost:3000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li><strong>（3）使用node命令启动服务器，并访问本地地址端口3000</strong></li></ul><div class="language-undefined ext-undefined line-numbers-mode"><pre class="language-undefined"><code>    node app\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="三、服务器自动重新部署" tabindex="-1"><a class="header-anchor" href="#三、服务器自动重新部署" aria-hidden="true">#</a> 三、服务器自动重新部署</h3><ul><li><strong>（1）、 nodejs开发辅助工具<img src="https://math.jianshu.com/math?formula=\\color{red}{nodemon}" alt="\\color{red}{nodemon}"></strong><br> 修改代码后，需要重新启动 Koa应用，所做的修改才能生效。若之后的每次代码修改都要重复这样的操作，势必会影响开发效率，使用了nodemon后，它会监测项目中的所有文件，一旦发现文件有改动，<img src="https://math.jianshu.com/math?formula=\\color{red}{nodemon}" alt="\\color{red}{nodemon}">会自动重启应用</li><li><strong>（2）全局安装nodemon</strong></li></ul><div class="language-undefined ext-undefined line-numbers-mode"><pre class="language-undefined"><code>   npm i nodemon -g\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><strong>（3）启动服务的时候用nodemon app.js 代替node app.js</strong></li></ul><div class="language-undefined ext-undefined line-numbers-mode"><pre class="language-undefined"><code>    nodemon app\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="四、koa中间件" tabindex="-1"><a class="header-anchor" href="#四、koa中间件" aria-hidden="true">#</a> 四、Koa中间件</h3><ul><li><strong>（1）什么是koa中间件</strong><br> koa对网络请求采用了中间件的形式处理,中间件可以介入请求和相应的处理,是一个轻量级的模块,每个中间负责完成某个特定的功能。中间件的通过next函数联系,执行next()后会将控制权交给下一个中间件,如果没有中间件没有执行next后将会沿路折返,将控制权交换给前一个中间件。<br> 每个中间件都是一个函数(不是函数将报错)，接收两个参数，第一个是<img src="https://math.jianshu.com/math?formula=\\color{red}{ctx}" alt="\\color{red}{ctx}">上下文对象，另一个是<img src="https://math.jianshu.com/math?formula=\\color{red}{next}" alt="\\color{red}{next}">函数</li><li><strong>（2）中间件的使用</strong></li></ul><div class="language-ruby ext-rb line-numbers-mode"><pre class="language-ruby"><code>    app<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token keyword">next</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token operator">/</span><span class="token operator">/</span> 在ctx上放入username<span class="token punctuation">,</span>后面的所有请求的ctx里都会有username这个变量\n        ctx<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">&#39;我是Grayly&#39;</span><span class="token punctuation">;</span>\n        <span class="token operator">/</span><span class="token operator">/</span> 处理完之后放行<span class="token punctuation">,</span>不使用<span class="token keyword">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>的话<span class="token punctuation">,</span>程序会被挂起来不动了\n        <span class="token keyword">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li><strong>（3）中间件有先后顺序</strong></li></ul><h3 id="五、koa路由配置" tabindex="-1"><a class="header-anchor" href="#五、koa路由配置" aria-hidden="true">#</a> 五、Koa路由配置</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa-router&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nrouter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&#39;哈哈哈&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> router\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 导入koa模块</span>\n<span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 创建koa的实例app</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./router/user&#39;</span><span class="token punctuation">)</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// 监听端口</span>\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;服务器已启动，http://localhost:3000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li><strong>（1）安装koa-router</strong></li></ul><div class="language-undefined ext-undefined line-numbers-mode"><pre class="language-undefined"><code>    npm i koa-router -D\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><strong>（2）导入koa-router模块并实例化</strong></li></ul><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code>    <span class="token comment">// 导入koa-router模块</span>\n    <span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa-router&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 创建koa-router的实例router</span>\n    <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><strong>（3）配置，并访问本地地址端口3000</strong></li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code>    router<span class="token operator">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/&#39;</span><span class="token punctuation">,</span> ctx <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        ctx<span class="token operator">.</span>body <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;哈哈哈&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    app<span class="token operator">.</span><span class="token keyword">use</span><span class="token punctuation">(</span>router<span class="token operator">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><p>（4）koa-router 提供了 .get、.post、.put 和 .del 接口来处理各种请求，但实际业务上，我们大部分只会接触到 POST 和 GET，所以接下来只针对这两种请求类型来说明。</p><ul><li>（4.1）get：用于接收GET请求</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code>    router<span class="token operator">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/get&#39;</span><span class="token punctuation">,</span> ctx <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        ctx<span class="token operator">.</span>body <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;哈哈哈&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    app<span class="token operator">.</span><span class="token keyword">use</span><span class="token punctuation">(</span>router<span class="token operator">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>（4.2）post：用于接收POST请求</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code>    router<span class="token operator">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/&#39;</span><span class="token punctuation">,</span> ctx <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        ctx<span class="token operator">.</span>body <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;哈哈哈&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    app<span class="token operator">.</span><span class="token keyword">use</span><span class="token punctuation">(</span>router<span class="token operator">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>（4.3）all：用于接收GET与POST请求</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code>    router<span class="token operator">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/&#39;</span><span class="token punctuation">,</span> ctx <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        ctx<span class="token operator">.</span>body <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;哈哈哈&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    app<span class="token operator">.</span><span class="token keyword">use</span><span class="token punctuation">(</span>router<span class="token operator">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>（5）获取请求参数</p><ul><li>（5.1）获取get请求参数：<code>ctx.query</code></li></ul><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>      router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">&#39;/get&#39;</span><span class="token punctuation">,</span> ctx <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n          ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> ctx<span class="token punctuation">.</span>query\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><p>（5.2）获取post请求参数：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>ctx.request.body\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>当用 post 方式请求时，我们会遇到一个问题：post 请求通常都会通过表单或 JSON 形式发送，而无论是 Node 还是 Koa，都 没有提供 解析 post 请求参数的功能。</li><li><strong>获取post请求需要使用koa-body模块</strong></li></ul><div class="language-undefined ext-undefined line-numbers-mode"><pre class="language-undefined"><code>  npm i koa-body --save\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>    router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">&#39;/get&#39;</span><span class="token punctuation">,</span> ctx <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>（5.3）使用中间件封装请求参数：<strong>把get请求参数和post请求参数都放入params对象</strong></p></li></ul><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code>      app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          ctx<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token punctuation">{</span>\n              <span class="token operator">...</span>ctx<span class="token punctuation">.</span>query<span class="token punctuation">,</span>\n              <span class="token operator">...</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body\n          <span class="token punctuation">}</span>\n          <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul><h3 id="六、设置静态目录" tabindex="-1"><a class="header-anchor" href="#六、设置静态目录" aria-hidden="true">#</a> 六、设置静态目录<img src="https://math.jianshu.com/math?formula=\\color{red}{koa-static}" alt="\\color{red}{koa-static}"></h3>',30),u=(0,p.Uk)("（1）在目录中创建目录public，在public下创建文件demo.html，访问"),r={href:"https://links.jianshu.com/go?to=http%3A%2F%2Flocalhost%3A3000%2Fpublic%2Fdemo.html",target:"_blank",rel:"noopener noreferrer"},i=(0,p.Uk)("http://localhost:3000/public/demo.html"),k=(0,p.Uk)("是无法访问得到，因为我们还没有设置静态资源目录,设置静态资源目录要用到koa-static模块"),d=(0,p._)("li",null,[(0,p._)("strong",null,"（2）安装koa-static")],-1),b=(0,p.uE)('<div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>    npm i koa<span class="token operator">-</span><span class="token keyword">static</span> <span class="token operator">-</span>D\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><strong>（3）在app.js里加入如下代码</strong></li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code>    <span class="token keyword">const</span> <span class="token constant">koaStatic</span> <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;koa-static&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    app<span class="token operator">.</span><span class="token keyword">use</span><span class="token punctuation">(</span><span class="token function">koaStatic</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string single-quoted-string">&#39;/public&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="七、使用模板引擎" tabindex="-1"><a class="header-anchor" href="#七、使用模板引擎" aria-hidden="true">#</a> 七、使用模板引擎<img src="https://math.jianshu.com/math?formula=\\color{red}{koa-views}" alt="\\color{red}{koa-views}"></h3><ul><li><strong>（1）安装koa-views</strong></li></ul><div class="language-undefined ext-undefined line-numbers-mode"><pre class="language-undefined"><code>    npm i koa-views -D\n    npm i underscore -D\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><strong>（2）模板编写：在根目录创建views目录，在views目录下创建tpl.html,代码如下</strong></li></ul><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code>    <span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>&lt;%=title %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li><strong>（3）在app.js配置模板引擎中间件</strong></li></ul><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code>  <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> views <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;koa-views&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">views</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;views&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    map<span class="token operator">:</span> <span class="token punctuation">{</span>\n      html<span class="token operator">:</span> <span class="token string">&#39;underscore&#39;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li><strong>（4）使用模板引擎</strong></li></ul><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>    router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">&quot;/html&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> ctx <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&quot;tpl&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n            title<span class="token punctuation">:</span> <span class="token string">&quot;Grayly&quot;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="八、vue-ssr-vue服务器渲染" tabindex="-1"><a class="header-anchor" href="#八、vue-ssr-vue服务器渲染" aria-hidden="true">#</a> 八、Vue SSR（vue服务器渲染）</h3><ul><li><strong>（1）安装vue和vue服务器渲染插件</strong></li></ul><div class="language-undefined ext-undefined line-numbers-mode"><pre class="language-undefined"><code>  npm install vue vue-server-renderer -S\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><strong>（2）渲染</strong></li></ul><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code>    router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/ssr&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        第 <span class="token number">1</span> 步：创建一个 Vue 实例\n        <span class="token keyword">const</span> Vue <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;vue&#39;</span><span class="token punctuation">)</span>\n        <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;Hello World&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        第 <span class="token number">2</span> 步：创建一个 renderer\n        <span class="token keyword">const</span> renderer <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;vue-server-renderer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        第 <span class="token number">3</span> 步：将 Vue 实例渲染为 <span class="token constant">HTML</span>\n        renderer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> html</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err\n            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>\n            ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> html<span class="token punctuation">;</span>\n            <span class="token comment">// =&gt; &lt;div data-server-rendered=&quot;true&quot;&gt;Hello World&lt;/div&gt;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="九、-跨域设置" tabindex="-1"><a class="header-anchor" href="#九、-跨域设置" aria-hidden="true">#</a> 九、<img src="https://math.jianshu.com/math?formula=\\color{red}{Koa}" alt="\\color{red}{Koa}"> 跨域设置</h3><ul><li><strong>使用中间件编写跨域设置</strong></li></ul><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>    app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 设置允许跨域</span>\n        ctx<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Origin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        ctx<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Methods&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;PUT, POST, GET, DELETE, OPTIONS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 请求头设置</span>\n        ctx<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>\n            <span class="token string">&quot;Access-Control-Allow-Headers&quot;</span><span class="token punctuation">,</span>\n            `<span class="token class-name">Content</span><span class="token operator">-</span><span class="token class-name">Type</span><span class="token punctuation">,</span> <span class="token class-name">Content</span><span class="token operator">-</span><span class="token class-name">Length</span><span class="token punctuation">,</span> <span class="token class-name">Authorization</span><span class="token punctuation">,</span> <span class="token class-name">Accept</span><span class="token punctuation">,</span> <span class="token class-name">X</span><span class="token operator">-</span><span class="token class-name">Requested</span><span class="token operator">-</span><span class="token class-name">With</span> <span class="token punctuation">,</span> yourHeaderFeild<span class="token punctuation">,</span>x<span class="token operator">-</span>token<span class="token punctuation">,</span>sessionToken<span class="token punctuation">,</span>token`\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">&quot;OPTIONS&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>',20),m={},g=(0,a(3744).Z)(m,[["render",function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("p",null,[e,(0,p._)("a",o,[l,(0,p.Wm)(a)])]),c,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("strong",null,[u,(0,p._)("a",r,[i,(0,p.Wm)(a)]),k])]),d]),b],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);