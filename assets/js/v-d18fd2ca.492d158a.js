"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[658],{5498:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-d18fd2ca",path:"/study/20.Android/android.html",title:"四大组件",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"设计思想",slug:"设计思想",children:[]},{level:2,title:"Activity",slug:"activity",children:[]},{level:2,title:"Intent",slug:"intent",children:[]},{level:2,title:"Service",slug:"service",children:[{level:3,title:"JobService使用",slug:"jobservice使用",children:[]},{level:3,title:"JobIntentService",slug:"jobintentservice",children:[]},{level:3,title:"前台服务",slug:"前台服务",children:[]},{level:3,title:"WorkManager",slug:"workmanager",children:[]}]},{level:2,title:"Broadcast Receiver",slug:"broadcast-receiver",children:[]},{level:2,title:"ContentProvider",slug:"contentprovider",children:[]}],filePathRelative:"study/20.Android/android.md",git:{updatedTime:1644302922e3}}},7414:(n,s,a)=>{a.r(s),a.d(s,{default:()=>wa});var t=a(6252);const p=(0,t.uE)('<h1 id="四大组件" tabindex="-1"><a class="header-anchor" href="#四大组件" aria-hidden="true">#</a> 四大组件</h1><h2 id="设计思想" tabindex="-1"><a class="header-anchor" href="#设计思想" aria-hidden="true">#</a> 设计思想</h2><p>Android应用模型的设计思想来自Web 2.0的Mashup概念，是基于组件的应用设计模式。在该模型下，每个应用都由一系列的组件搭建而成，组件通过应用的配置文件描述功能。Android依照组件的配置信息，了解各个组件的功能并进行调度。</p><p>什么是Mashup？</p><p>源于流行音乐，mashup 是从两首不同的歌曲（通常属于不同的流派）中混合演唱和乐器的音轨而构成的一首新歌。最初广泛流行起来的 mashup 之一是一个 Web 站点，它将芝加哥警局在线数据库中的犯罪记录与 Google Maps 上的地图复合在一起。用户可以与 mashup 站点进行交互，例如告诉它在图形界面上显示一个包含图钉的地图，图钉展示南加州最近所有入室抢劫案件的详细信息。这种概念和呈现方式非常简单，犯罪和地图数据复合之后提供的可视化的功能非常强大。</p><p>Web上充满了表面上可以满足一切需要的网站。开发者认识到这些资源，决心重新加以利用，对它们进行扩充，而不是模仿它们的功能。重新利用和扩充这些资源的结果就是mashup概念，目的就是为了避免<strong>做重复的工作</strong>。</p><p>Android中的Mashup</p><p>有这样一个例子描述，“你为心仪的女生写了一封热情洋溢的电子情书，需要选一张最帅气的照片作为附件。于是，你点击选择图片作为附件，此时设备上你最常用的图片应用跳了出来，通过它，你很快就找到了最帅的那张照片，添加到电子邮件中并发送了出去”。这里涉及了两款应用，邮件应用和图库应用，两款应用协同完成了用户的需求。</p><h2 id="activity" tabindex="-1"><a class="header-anchor" href="#activity" aria-hidden="true">#</a> Activity</h2><p>实际上相当于一个页面，但它是一个重量级的组件，内部持有一个<code>PhoneWindow</code>，主要作为显示页面的容器。安卓APP中必须有一个Activity。关于Activity的详细剖析《Android 进阶之了解源码——Activity启动》](https://blog.csdn.net/yingshukun/article/details/79188368)</p><p><img src="https://gitee.com/arcticfox1919/ImageHosting/raw/master/img/20201727.jpg" alt="img"></p><p>Activity的任务栈</p><p>Android中使用任务栈来管理页面，通常一个应用默认开启一个任务栈，也可主动创建新任务栈。任务栈中管理着相关的Activity页面。</p><p><img src="https://gitee.com/arcticfox1919/ImageHosting/raw/master/img/Snipaste_2020-08-29_13-56-22.jpg" alt="img"></p><p>当应用在前后台切换时，存在移栈的操作</p><p><img src="https://gitee.com/arcticfox1919/ImageHosting/raw/master/img/20181008231659412814.png" alt="img"></p><p>Activity共有四种启动模式</p><p><img src="https://gitee.com/arcticfox1919/ImageHosting/raw/master/img/u=4163417439,105180815&amp;fm=26&amp;gp=0.jpg" alt="img"></p><ul><li><strong>standard</strong> 　标准启动模式，也是默认启动模式</li></ul><p><img src="https://gitee.com/arcticfox1919/ImageHosting/raw/master/img/20181008231659508521.png" alt="img"></p><ul><li><p><strong>singleTop</strong></p><p>栈顶复用模式。启动一个Activity的时候如果发现栈顶已经存在这个Activity了，就不会去重新创建新的Activity，而是复用这个栈顶已经存在的Activity，避免同一个Activity被重复创建。</p></li></ul><p><img src="https://gitee.com/arcticfox1919/ImageHosting/raw/master/img/20181008231659945061.png" alt="img"></p><ul><li><p><strong>singleTask</strong></p><p>栈内复用模式。开启一个Activity的时候，检查任务栈里面是否存在这个Activity的实例，如果存在的话清除任务栈中在这个Activity之上的所有其他Activity。</p></li></ul><p><img src="https://gitee.com/arcticfox1919/ImageHosting/raw/master/img/20181008231700267339.png" alt="img"></p><ul><li><strong>singleInstance</strong></li></ul><p>单例复用模式。在启动的时候，会开启一个新的任务栈，这个任务栈里只管理一个Activity的实例。它会使系统中只存在唯一的该Activity实例，无论是从何处启动。即全局唯一。</p><p><img src="https://gitee.com/arcticfox1919/ImageHosting/raw/master/img/20181008231700630634.png" alt="img"></p><p>清单文件中配置启动模式</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span>\n    <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.MyActivity<span class="token punctuation">&quot;</span></span>\n    <span class="token attr-name"><span class="token namespace">android:</span>launchMode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>singleTask<span class="token punctuation">&quot;</span></span>\n    <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@string/app_name<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>关于Activity的使用，有两大步骤</p><ul><li>自定义Activity，通常会继承自<code>AppCompatActivity</code>，在某种情况下可以直接继承<code>Activity</code></li><li><code>AndroidManifest</code>文件中进行配置</li></ul><h2 id="intent" tabindex="-1"><a class="header-anchor" href="#intent" aria-hidden="true">#</a> Intent</h2><p>一般翻译为意图。</p><p>对于基于组件的应用开发而言，不仅需要构造和寻找符合需求的组件，更重要的是要将组件有机地连接起来，互联互通交换信息，才能够最终提供应用所期望的服务。而为了能够更好地实现组件复用，充分地利用每一个组件的能力，就需要这些组件连接的模式足够灵活和统一，并且可以进行动态地扩展。因此Android提供了意图机制。</p><p><img src="https://gitee.com/arcticfox1919/ImageHosting/raw/master/img/Snipaste_2020-08-31_18-47-50.jpg" alt="img"></p><ul><li>调用组件 调用组件是连接请求的发起者，它期望寻找其他组件来帮助完成所需的功能。调用组件可以是界面组件、服务组件或触发器组件，通过调用<code>Context.startActivity</code>和<code>Context.bindService</code>等函数发起对目标组件的连接请求。</li><li>实现组件 实现组件指的是响应调用者请求完成所需任务的组件。在Android中，每个组件都可以作为调用者请求第三方帮助，也都可以扮演实现者去完成对应的请求。对于实现组件而言，它不需要关注其调用者是谁，只需要依照请求者发送的Intent对象去执行相关功能即可。</li><li>组件管理服务 在调用组件与实现组件的连接过程中，组件管理服务扮演了调度者的角色。它从调用组件中接收到Intent对象，然后将该对象与应用管理服务收集到的组件<code>Intent Filter</code>对象进行比较，从中选择出符合调用组件需求的实现组件，最后构造并调用实现组件对象。组件管理服务是一个系统服务，运行在系统核心进程的独立线程中，通过进程间通信机制，与各个组件进行交互。</li></ul><p>需要注意，四大组件中，ContentProvider是唯一不使用意图机制的组件。</p><p>一般将Intent分为两种：</p><ul><li><p>显式<code>Intent</code></p><p>直接通过名称启动指定的目标组件，通过其构造方法<code>Intent(Context packageContext, Class class)</code>来实现</p></li><li><p>隐式<code>Intent</code></p><p>没有明确指定要启动哪个目标组件，而是指定<code>action</code>和<code>category</code>等属性信息，系统根据这些信息进行分析，然后寻找符合要求的目标组件。各种系统功能的调用，如调用通讯录、发短信、发邮件等都是采用隐式Intent来实现</p></li></ul><p>使用Intent启动Activity的几种写法</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 1.显式Intent</span>\n\n<span class="token comment">// 最简单的写法，适合启动本应用内部自己的Activity</span>\n<span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token class-name">SecondActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 适合启动其他应用的Activity</span>\n<span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nintent<span class="token punctuation">.</span><span class="token function">setComponent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ComponentName</span><span class="token punctuation">(</span><span class="token string">&quot;org.bczl.helloworld&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;org.bczl.helloworld.SecondActivity&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 以上的简化写法，其内部封装了ComponentName</span>\n<span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nintent<span class="token punctuation">.</span><span class="token function">setClassName</span><span class="token punctuation">(</span><span class="token string">&quot;org.bczl.helloworld&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;org.bczl.helloworld.SecondActivity&quot;</span><span class="token punctuation">)</span>\n<span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 2.隐式Intent</span>\n\n<span class="token comment">// 调用浏览器，打开指定的网站</span>\n<span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_VIEW<span class="token punctuation">)</span><span class="token punctuation">;</span>\nintent<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;https://www.baidu.com/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 启动自定义的action</span>\n<span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token string">&quot;org.bczl.helloworld.custom_action&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>我们还可以利用Intent启动指定包名的App</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLaunchIntentForPackage</span><span class="token punctuation">(</span><span class="token string">&quot;packageName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>intent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>注意，当使用Intent启动服务时，则使用<code>startService</code>方法。另外，Intent还能设置一些标志位，在启动Activity时非常有用，例如：遇到退出登录时，需要将界面跳转到登录界面，并将栈中所有Activity清空</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nintent<span class="token punctuation">.</span><span class="token function">addFlags</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>FLAG_ACTIVITY_CLEAR_TASK<span class="token operator">|</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>FLAG_ACTIVITY_NEW_TASK<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>FLAG_ACTIVITY_CLEAR_TASK</code>这个标志表示清除之前所有已经打开的Activity，必须跟<code>FLAG_ACTIVITY_NEW_TASK</code>一起使用</p><p>使用<code>Intent</code>传送数据</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 放置数据</span>\nintent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 取出数据</span>\nintent<span class="token punctuation">.</span><span class="token function">getStringExtra</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>它有一些列<code>put</code>开头的方法用于存放各种类型数据，使用对应的<code>get</code>开头的方法取出</p><p><img src="https://gitee.com/arcticfox1919/ImageHosting/raw/master/img/Snipaste_2020-09-10_20-43-49.jpg" alt="img"></p>',50),e=(0,t.Uk)("关于Intent的详细使用，参见 "),o={href:"https://developer.android.google.cn/guide/components/intents-filters?hl=zh_cn",target:"_blank",rel:"noopener noreferrer"},c=(0,t.Uk)("Intent 和 Intent 过滤器"),l=(0,t.Uk)("Android 内置了许多常用的Action，可查阅 "),u={href:"https://developer.android.google.cn/guide/components/intents-common?hl=zh_cn#top_of_page",target:"_blank",rel:"noopener noreferrer"},i=(0,t.Uk)("通用Intent 文档"),r=(0,t._)("p",null,[(0,t._)("strong",null,"一些使用实例")],-1),k=(0,t.Uk)("调用系统分享功能，参见 "),d={href:"https://developer.android.google.cn/guide/components/intents-filters?hl=zh_cn#ForceChooser",target:"_blank",rel:"noopener noreferrer"},m=(0,t.Uk)("强制使用应用选择器"),b=(0,t.uE)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_SEND<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//设置一个明确的MIME类型，例如&quot;image/*&quot;之类</span>\nintent<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 要分享的内容，这里是纯文本内容</span>\nintent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>EXTRA_TEXT<span class="token punctuation">,</span> <span class="token string">&quot;我是被分享的字符串&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nintent<span class="token punctuation">.</span><span class="token function">addFlags</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>FLAG_ACTIVITY_NEW_TASK<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 设置分享弹框的标题</span>\n<span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token function">createChooser</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> <span class="token string">&quot;我是分享标题&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>拉起拨号盘应用，并传递号码</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_DIAL<span class="token punctuation">,</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;tel:10086&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>直接拨号。注意，需要运行时权限<code>android.permission.CALL_PHONE</code></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_CALL<span class="token punctuation">,</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;tel:10086&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>调用短信APP发短信</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_VIEW<span class="token punctuation">,</span><span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;smsto:10086&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nintent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">&quot;sms_body&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;这是短信的内容&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>选择图库照片</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_GET_CONTENT<span class="token punctuation">)</span><span class="token punctuation">;</span>\nintent<span class="token punctuation">.</span><span class="token function">setDataAndType</span><span class="token punctuation">(</span><span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>EXTERNAL_CONTENT_URI<span class="token punctuation">,</span><span class="token string">&quot;image/*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">startActivityForResult</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>发送邮件</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_SEND<span class="token punctuation">)</span><span class="token punctuation">;</span>\nintent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>EXTRA_EMAIL<span class="token punctuation">,</span> <span class="token string">&quot;to@abc.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nintent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>EXTRA_SUBJECT<span class="token punctuation">,</span> <span class="token string">&quot;这是邮件标题&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nintent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>EXTRA_TEXT<span class="token punctuation">,</span> <span class="token string">&quot;这是邮件的内容&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nintent<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token function">createChooser</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span> <span class="token string">&quot;选择邮箱客户端&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>调用系统播放器播放音频</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_VIEW<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 将路径转为uri，这里将sdcard上的01.mp3路径转为uri</span>\nintent<span class="token punctuation">.</span><span class="token function">setDataAndType</span><span class="token punctuation">(</span><span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">fromFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token class-name">Environment</span><span class="token punctuation">.</span><span class="token function">getExternalStorageDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;01.mp3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;audio/mp3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">startActivity</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>注意，在API 24+以上版本，不能直接使用<code>file://</code>型的uri，以上代码会报错，有两种解决办法</p><ul><li>简单处理一下，可以使用反射黑科技关闭系统的路径检查，先调用如下代码关闭，再执行以上代码</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">try</span><span class="token punctuation">{</span>\n    <span class="token class-name">Method</span> m <span class="token operator">=</span> <span class="token class-name">StrictMode</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;disableDeathOnFileUriExposure&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',16),g=(0,t.Uk)("谷歌推荐的解决方法，是使用"),v=(0,t._)("code",null,"FileProvider",-1),f=(0,t.Uk)("来处理，详细配置过程，见官方文档 "),h={href:"https://developer.android.google.cn/training/secure-file-sharing/setup-sharing?hl=zh_cn",target:"_blank",rel:"noopener noreferrer"},y=(0,t.Uk)("设置文件共享"),_=(0,t.uE)('<p>注意，<code>filepaths.xml</code> 文件应如下配置</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>paths</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.android.com/apk/res/android<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>external-path</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>external_files<span class="token punctuation">&quot;</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>paths</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>使用时，将<code>Uri uri=Uri.fromFile(xxxx)</code>改为<code>Uri uri=FileProvider.getUriForFile(context, context.getPackageName() + &quot;.provider&quot;, xxxx)</code></p>',3),I=(0,t.uE)('<h2 id="service" tabindex="-1"><a class="header-anchor" href="#service" aria-hidden="true">#</a> Service</h2><p>是一种可在后台执行长时间运行操作而不提供界面的应用组件。服务可由其他应用组件启动，而且即使用户切换到其他应用，服务仍将在后台继续运行。此外，组件可通过绑定到服务与之进行交互，甚至是执行进程间通信 (IPC)。例如，服务可在后台处理网络事务、播放音乐，执行文件 I/O 或与内容提供程序进行交互。</p><p>总的来说，它非常适合去执行那些不需要和用户交互而且还要求长期运行的任务。</p><p>服务有三种不同的类型</p><ul><li><p>前台服务</p></li><li><p>后台服务</p><ul><li><p><code>Service</code></p></li><li><p><code>IntentService</code></p><p>内部封装了线程，简化了自己处理异步线程的步骤</p></li></ul></li><li><p>绑定服务</p></li></ul>',5),w=(0,t.Uk)("了解更多关于服务的概念和用法，可参阅 "),q={href:"https://developer.android.google.cn/guide/components/services?hl=zh_cn",target:"_blank",rel:"noopener noreferrer"},A=(0,t.Uk)("服务中文文档"),S=(0,t.Uk)("。"),x=(0,t.Uk)("特别注意："),C=(0,t.Uk)("如果"),U=(0,t._)("code",null,"targetSdkVersion",-1),W=(0,t.Uk)(" 设置的 API 级别是 26 或更高版本，且应用本身未在前台运行时，系统会对"),E={href:"https://developer.android.google.cn/about/versions/oreo/background?hl=zh_cn",target:"_blank",rel:"noopener noreferrer"},M=(0,t.Uk)("运行后台服务施加限制"),T=(0,t.Uk)("。在诸如此类的大多数情况下，可以参考"),j={href:"https://developer.android.google.cn/guide/background?hl=zh_cn",target:"_blank",rel:"noopener noreferrer"},R=(0,t.Uk)("后台处理指南"),J=(0,t.uE)('<p><strong>什么是后台服务？</strong></p><p>主要有两种情况，1.在没有界面的情况下启动的服务（即没有Activity）；2.当前Activity失去焦点（锁屏、回到桌面、切换到其他APP）超过60秒以上，此时在Activity中启动服务也是后台服务。</p><p>可以使用如下方法验证，将Activity切后台，70秒之后启动一个服务，Android 8.0则会报错：<code>java.lang.IllegalStateException: Not allowed to start service Intent</code></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 设置一个70秒延时任务</span>\n<span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">postDelayed</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">startService</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token class-name">MyService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">70000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>用于服务限制目的的后台定义与内存管理使用的定义不同，一个应用按照内存管理的定义可能处于后台，但按照能够启动服务的定义又处于前台。<strong>具有可见 Activity（不管该 Activity 已启动还是已暂停），将被视为处于前台</strong>。注意，<strong>绑定服务</strong>不受8.0后台限制的影响。</p><p>从Android 8.0 开始，已经不能启动后台服务，可行的替代方案有：</p>',6),N=(0,t._)("li",null,[(0,t._)("p",null,"前台服务")],-1),P={href:"https://developer.android.google.cn/topic/performance/background-optimization?hl=zh_cn",target:"_blank",rel:"noopener noreferrer"},O=(0,t.Uk)("JobScheduler"),D=(0,t._)("p",null,"是Android 5.0添加的新API，允许开发者在符合某些条件时创建执行在后台的任务。该机制要求至少是API 21版本，无法向后兼容。",-1),L={href:"https://developer.android.google.cn/reference/android/app/job/JobService?hl=zh_cn",target:"_blank",rel:"noopener noreferrer"},B=(0,t.Uk)("JobService"),F=(0,t._)("p",null,"是Android 5.0时加入的组件，结合了JobScheduler机制。适用于需要特定条件下才执行后台任务的场景，它由系统统一管理和调度。",-1),z={href:"https://developer.android.google.cn/reference/androidx/core/app/JobIntentService",target:"_blank",rel:"noopener noreferrer"},H=(0,t.Uk)("JobIntentService"),V={href:"https://developer.android.google.cn/topic/libraries/architecture/workmanager?hl=zh_cn",target:"_blank",rel:"noopener noreferrer"},G=(0,t.Uk)("WorkManager"),Y=(0,t.uE)('<h3 id="jobservice使用" tabindex="-1"><a class="header-anchor" href="#jobservice使用" aria-hidden="true">#</a> JobService使用</h3><p><img src="https://gitee.com/arcticfox1919/ImageHosting/raw/master/img/c5f6c2951b8fd.png" alt="img"></p><p><code>JobService</code>本质上是一个回调，我们把这个回调注册给系统的<code>JobScheduler</code>，有系统根据我们设置的一些条件，来安排如何以及什么时候来执行这个回调任务。</p><ul><li>首先创建<code>JobInfo</code>，描述我们需要启动一个什么样的任务</li><li>创建<code>JobScheduler</code>负责对<code>JobService</code>的调度</li></ul><p><img src="https://gitee.com/arcticfox1919/ImageHosting/raw/master/img/0d0a837a6e574.png" alt="img"></p><table><thead><tr><th>对比角度</th><th>Service</th><th>JobService</th></tr></thead><tbody><tr><td>实现原理</td><td>由APP侧发出请求，ActivityManagerService接收请求后进行调度，通知APP侧进行创建，开始(绑定)，停止(解绑)和销毁Service。</td><td>由APP侧发出请求，JobSchedulerService接收请求后，通过ActivityManagerService去调度JobService的创建，绑定和解绑。并由JobSchedulerService自己进行JobService的开始，取消和停止等操作。即JobService是由系统负责调用和维护</td></tr><tr><td>启动条件</td><td>Service的启动并没有什么特定的条件设置。如果说非要有什么具体的执行条件的话，就是APP侧自己根据业务逻辑在适当的时候调用startService()或者bindService()。</td><td>JobService的执行需要至少一个条件。没有条件的JobService是无法启动的，在创建JobInfo的时候会抛出异常。</td></tr><tr><td>运行时间</td><td>onStartCommand()的回调在UI线程，不可执行耗时逻辑，否则可能造成ANR。</td><td>onStartJob()的回调在UI线程，不可执行耗时逻辑，否则可能造成ANR或者Job被强制销毁(超过8s)。并且，JobService里即便新起了线程，处理的时间也不能超过10min，否则Job将被强制销毁。</td></tr><tr><td>启动角度</td><td>onStartCommand()里返回START_STICKY可以告诉AMS在被停止后自动启动。</td><td>onStopJob()里返回true，即可在被强制停止后再度启动起来。</td></tr><tr><td>扩展性</td><td>APP侧可以通过Binder创建远程Service进行IPC。</td><td>JobService的绑定实际上是由JobSchedulerService自己去做的。绑定后产生的Binder用于和JobSchedulerService进行IPC，APP侧无法通过JobService扩展去实现别的IPC功能。</td></tr><tr><td>实际应用上</td><td>适合需要常驻后台，立即执行，进行数据获取，功能维持的场景。比如 音乐播放，定位，邮件收发等。</td><td>适合不需要常驻后台，不需要立即执行，在某种条件下触发，执行简单任务的场景。比如 联系人信息变化后的快捷方式的更新，定期的更新电话程序的联系人信息，壁纸更改后去从壁纸提取颜色的后台任务。</td></tr></tbody></table><p><strong>JobService API</strong></p><table><thead><tr><th>方法</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>onStartJob()</code></td><td><code>params</code>：包含用于配置/识别任务的参数，由系统传递</td><td>任务开始时的回调，实现实际的工作逻辑。执行该方法时需要返回一个布尔值，返回true时，任务将保持活动状态，直到系统调用<code>jobFinished</code>或者直到该任务所需的条件不在满足；返回false，系统会自动结束任务；只要任务正在执行，系统就会代表应用程序保留一个唤醒锁。</td></tr><tr><td><code>jobFinished()</code></td><td><code>wantsReschedule</code>：若希望系统再次执行该任务，则应设置为true</td><td>调用此方法通知JobScheduler该任务已完成。当系统收到此消息时，它会释放为该任务保留的唤醒锁。注意，该方法执行完后不会回调<code>onStopJob()</code>，但会回调<code>onDestroy()</code></td></tr><tr><td><code>onStopJob()</code></td><td>同上</td><td>当JobScheduler发觉该任务条件不满足时，或者任务被抢占或被取消时的强制回调。注意，如果想在这种意外的情况下让任务重新开始，返回值应该设置为true</td></tr><tr><td><code>onCreate()</code></td><td>从父类Service继承的方法</td><td>可以在这里设置BroadcastReceiver或者ContentObserver</td></tr><tr><td><code>onDestroy()</code></td><td>Service被销毁前的回调</td><td>可以在这里注销BroadcastReceiver或者ContentObserver</td></tr></tbody></table><p><strong>JobScheduler API</strong></p><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>schedule()</td><td>安排一个任务</td></tr><tr><td>enqueue()</td><td>安排一个任务，但是可以将一个任务排入队列</td></tr><tr><td>cancel()</td><td>取消一个指定ID的任务</td></tr><tr><td>cancelAll()</td><td>取消该app所有的注册到JobScheduler里的任务</td></tr><tr><td>getAllPendingJobs()</td><td>获取该app所有的注册到JobScheduler里未完成的任务列表</td></tr><tr><td>getPendingJob()</td><td>按照ID检索获得JobScheduler里未完成的该任务的JobInfo信息</td></tr></tbody></table>',10),K=(0,t._)("code",null,"JobInfo.Builder",-1),X=(0,t.Uk)("中有许多方法用于设置运行后台任何的条件，详细见"),Z={href:"https://developer.android.google.cn/reference/android/app/job/JobInfo.Builder",target:"_blank",rel:"noopener noreferrer"},Q=(0,t.Uk)("JobInfo.Builder 文档"),$=(0,t.uE)('<p>使用JobService的一些注意事项</p><ul><li>JobInfo创建的时候必须设置一个任务执行的条件。否则会抛出<code>IllegalArgumentException &quot;You&#39;re trying to build a job with no constraints, this is not allowed.&quot;</code>异常</li><li>同一个进程里只能有唯一的Job ID。否则新的Job会抢占已经运行的Job，导致该Job被异常终止</li><li><code>JobService</code>因运行条件变化被强制停止后想在条件恢复时自启动，就需要让<code>onStopJob()</code>返回true</li><li>主动<code>cancel</code>了Job，即使<code>onStopJob()</code>返回true系统也不会再度启动该Job</li><li>如果要执行长时间任务，<code>onStartJob()</code>应返回true。不然<code>onStartJob()</code>刚回调结束， 任务就会被停止</li></ul><p>从<code>JobService</code>派生子类</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyJobService</span> <span class="token keyword">extends</span> <span class="token class-name">JobService</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> JOB_ID <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> JOB_OVERDIDE_DEADLINE <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> TAG <span class="token operator">=</span> <span class="token string">&quot;MyJobService&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">&quot;onCreate--&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onStartJob</span><span class="token punctuation">(</span><span class="token class-name">JobParameters</span> jobParameters<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">&quot;onStartJob--&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onStopJob</span><span class="token punctuation">(</span><span class="token class-name">JobParameters</span> jobParameters<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">&quot;onStopJob--&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">&quot;onDestroy--&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>在<code>AndroidManifest.xml</code>中声明<code>service</code>和权限</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;service android:name=&quot;.MyJobService&quot; android:permission=&quot;android.permission.BIND_JOB_SERVICE&quot;/ &gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>将任务交给系统的<code>JobScheduler</code>机制，让系统来安排调用</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">JobInfo<span class="token punctuation">.</span>Builder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JobInfo<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token class-name">MyJobService</span><span class="token punctuation">.</span>JOB_ID<span class="token punctuation">,</span>\n        <span class="token keyword">new</span> <span class="token class-name">ComponentName</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">MyJobService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbuilder<span class="token punctuation">.</span><span class="token function">setRequiredNetworkType</span><span class="token punctuation">(</span><span class="token class-name">JobInfo</span><span class="token punctuation">.</span>NETWORK_TYPE_ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 需要在有网络状态下运行</span>\nbuilder<span class="token punctuation">.</span><span class="token function">setRequiresCharging</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 设置true表示仅在充电时运行</span>\nbuilder<span class="token punctuation">.</span><span class="token function">setOverrideDeadline</span><span class="token punctuation">(</span><span class="token class-name">MyJobService</span><span class="token punctuation">.</span>JOB_OVERDIDE_DEADLINE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置任务被立即执行的最大延迟期限</span>\n\n<span class="token keyword">final</span> <span class="token class-name">JobScheduler</span> scheduler <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getSystemService</span><span class="token punctuation">(</span><span class="token class-name">JobScheduler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nscheduler<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>另外，<code>builder</code>还可以通过<code>setPeriodic()</code>设置周期性任务，但最小间隔时间是15分钟，传入小于15分钟的值是无效的。还需要注意，<code>setMinimumLatencyc()</code>和<code>setOverrideDeadlinec()</code>不能同<code>setPeriodicc()</code>一起使用，会引起报错。</p><h3 id="jobintentservice" tabindex="-1"><a class="header-anchor" href="#jobintentservice" aria-hidden="true">#</a> JobIntentService</h3>',10),nn=(0,t.Uk)("它是IntentService + JobScheduler的实现，极大简化了代码使用，但也有明显缺陷，即无法立即执行，它的执行由JobScheduler机制来调度。具体使用，可参照 "),sn={href:"https://developer.android.google.cn/reference/androidx/core/app/JobIntentService",target:"_blank",rel:"noopener noreferrer"},an=(0,t.Uk)("官方文档示例"),tn=(0,t.uE)('<h3 id="前台服务" tabindex="-1"><a class="header-anchor" href="#前台服务" aria-hidden="true">#</a> 前台服务</h3><p>如果我们需要一个立即执行的，且优先级较高的服务处理即时任务，那么在Android 8.0之后的版本上，可以将后台服务升级为前台服务。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 兼容低版本，启动服务</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Build</span><span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">&gt;=</span> <span class="token class-name">Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>O</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">.</span><span class="token function">startForegroundService</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">MyService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>\n    context<span class="token punctuation">.</span><span class="token function">startService</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">MyService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>服务代码</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">&quot;TestService&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;onCreate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Notification</span> notification <span class="token operator">=</span> <span class="token function">createForegroundNotification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//启动通知 ,id不能为0</span>\n        <span class="token function">startForeground</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> notification<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">onStartCommand</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> startId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">&quot;TestService&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;onStartCommand&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStartCommand</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> startId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">&quot;TestService&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;onDestroy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 关闭通知</span>\n        <span class="token function">stopForeground</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Nullable</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">IBinder</span> <span class="token function">onBind</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * 设置服务在通知栏的显示情况\n     */</span>\n    <span class="token keyword">private</span> <span class="token class-name">Notification</span> <span class="token function">createForegroundNotification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">NotificationManager</span> notificationManager <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">NotificationManager</span><span class="token punctuation">)</span> <span class="token function">getSystemService</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span>NOTIFICATION_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 创建唯一的通道id</span>\n        <span class="token class-name">String</span> chanId <span class="token operator">=</span> <span class="token string">&quot;myId&quot;</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Build</span><span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">&gt;=</span> <span class="token class-name">Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>O</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">//通道名称，用于在系统设置=》通知中显示</span>\n            <span class="token class-name">String</span> channelName <span class="token operator">=</span> <span class="token string">&quot;这是我们的前台测试&quot;</span><span class="token punctuation">;</span>\n            <span class="token comment">//通道的重要程度</span>\n            <span class="token keyword">int</span> importance <span class="token operator">=</span> <span class="token class-name">NotificationManager</span><span class="token punctuation">.</span>IMPORTANCE_HIGH<span class="token punctuation">;</span>\n            <span class="token class-name">NotificationChannel</span> notificationChannel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NotificationChannel</span><span class="token punctuation">(</span>chanId<span class="token punctuation">,</span> channelName<span class="token punctuation">,</span> importance<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            notificationChannel<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&quot;Channel description&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//设置呼吸灯</span>\n            notificationChannel<span class="token punctuation">.</span><span class="token function">enableLights</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            notificationChannel<span class="token punctuation">.</span><span class="token function">setLightColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>RED<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//震动</span>\n            notificationChannel<span class="token punctuation">.</span><span class="token function">setVibrationPattern</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            notificationChannel<span class="token punctuation">.</span><span class="token function">enableVibration</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>notificationManager <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">// 向系统注册通知渠道</span>\n                notificationManager<span class="token punctuation">.</span><span class="token function">createNotificationChannel</span><span class="token punctuation">(</span>notificationChannel<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token class-name">NotificationCompat<span class="token punctuation">.</span>Builder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NotificationCompat<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> chanId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//通知栏的小图标</span>\n        builder<span class="token punctuation">.</span><span class="token function">setSmallIcon</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>mipmap<span class="token punctuation">.</span>ic_launcher<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//通知标题</span>\n        builder<span class="token punctuation">.</span><span class="token function">setContentTitle</span><span class="token punctuation">(</span><span class="token string">&quot;前台通知你&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//通知内容</span>\n        builder<span class="token punctuation">.</span><span class="token function">setContentText</span><span class="token punctuation">(</span><span class="token string">&quot;这是一个前台服务测试，请不要清除它&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//设置通知显示的时间</span>\n        builder<span class="token punctuation">.</span><span class="token function">setWhen</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//设置点击响应</span>\n        <span class="token class-name">Intent</span> activityIntent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">PendingIntent</span> pendingIntent <span class="token operator">=</span> <span class="token class-name">PendingIntent</span><span class="token punctuation">.</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> activityIntent<span class="token punctuation">,</span> <span class="token class-name">PendingIntent</span><span class="token punctuation">.</span>FLAG_UPDATE_CURRENT<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        builder<span class="token punctuation">.</span><span class="token function">setContentIntent</span><span class="token punctuation">(</span>pendingIntent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//创建通知并返回</span>\n        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br></div></div><p>需要特别注意，在Android 9.0及以上版本时，启动前台服务，还需要配置一个权限</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android.permission.FOREGROUND_SERVICE<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="workmanager" tabindex="-1"><a class="header-anchor" href="#workmanager" aria-hidden="true">#</a> WorkManager</h3>',8),pn=(0,t.Uk)("用于支持Android后台任务，提供延迟、周期性，约束性需求的后台任务。任务是交给系统统一调度的，适合一些轻量级的后台功能使用。还能支持在Doze模式下运行后台任务，WorkManager会在Doze模式的窗口期运行任务。其设计用意就是取代后台服务，由系统统一管理你的周期性后台服务，并且自动兼容API23以下版本，API23以下版本自动在底层使用"),en=(0,t._)("code",null,"AlarmManager",-1),on=(0,t.Uk)(" + "),cn=(0,t._)("code",null,"BroadcastReceiver",-1),ln=(0,t.Uk)("实现，而高于API23会使用"),un=(0,t._)("code",null,"JobScheduler",-1),rn=(0,t.Uk)("实现。因此，其内部本身是对"),kn=(0,t._)("code",null,"JobScheduler",-1),dn=(0,t.Uk)("的封装，并且解决了"),mn=(0,t._)("code",null,"JobScheduler",-1),bn=(0,t.Uk)("无法向后兼容的问题，是谷歌官方极力推荐的方案。另关于 Doze模式详细介绍，可参阅一篇 "),gn={href:"https://blog.csdn.net/licaomengRICE/article/details/48735957",target:"_blank",rel:"noopener noreferrer"},vn=(0,t.Uk)("翻译资料"),fn=(0,t._)("p",null,[(0,t._)("img",{src:"https://developer.android.google.cn/images/topic/libraries/architecture/workmanager/overview-criteria.png",alt:"img"})],-1),hn=(0,t._)("p",null,[(0,t._)("strong",null,"使用要点")],-1),yn=(0,t._)("ol",null,[(0,t._)("li",null,"针对不需要及时完成的任务。如，发送应用程序日志、同步应用程序数据、备份用户数据等，这些任务并不需要立即完成。如果我们自己来管理这些任务，逻辑可能会非常复杂，若API使用不恰当，可能会消耗大量电量"),(0,t._)("li",null,"确保任务一定会被执行。即使应用程序当前不在运行中，甚至在设备重启过后，任务仍然会在适当的时刻被执行。因为WorkManager有自己的数据库，关于任务的所有信息和数据都保存在该数据库中。因此，只要提交了任务，就能够保证完成任务。"),(0,t._)("li",null,"兼容范围广。最低能兼容API Level 14。")],-1),_n=(0,t._)("p",null,[(0,t._)("strong",null,"概念解释")],-1),In=(0,t._)("p",null,"WorkManager API使用了几个不同的类，以下是最重要的WorkManager类：",-1),wn={href:"https://developer.android.google.cn/reference/androidx/work/Worker.html",target:"_blank",rel:"noopener noreferrer"},qn=(0,t.Uk)("Worker"),An=(0,t.Uk)("：指定需要执行的任务，继承此类并在此处执行工作"),Sn={href:"https://developer.android.google.cn/reference/androidx/work/WorkRequest.html",target:"_blank",rel:"noopener noreferrer"},xn=(0,t.Uk)("WorkRequest"),Cn=(0,t.Uk)("：表示一个单独的任务。WorkRequest对象指定哪个Worker类应该执行任务。你可以向WorkRequest对象添加细节，指定任务应该在哪些条件下运行。每个WorkRequest都有一个自动生成的惟一ID；可以使用该ID执行诸如取消队列中的任务或获取任务的状态之类的操作。WorkRequest是一个抽象类；在代码中，你应当使用它的某个子类，"),Un={href:"https://developer.android.google.cn/reference/androidx/work/OneTimeWorkRequest.html",target:"_blank",rel:"noopener noreferrer"},Wn=(0,t.Uk)("OneTimeWorkRequest"),En=(0,t.Uk)("或"),Mn={href:"https://developer.android.google.cn/reference/androidx/work/PeriodicWorkRequest.html",target:"_blank",rel:"noopener noreferrer"},Tn=(0,t.Uk)("PeriodicWorkRequest"),jn={href:"https://developer.android.google.cn/reference/androidx/work/WorkRequest.Builder.html",target:"_blank",rel:"noopener noreferrer"},Rn=(0,t.Uk)("WorkRequest.Builder"),Jn=(0,t.Uk)("：创建WorkRequest对象的帮助类。你将使用一个子类，"),Nn={href:"https://developer.android.google.cn/reference/androidx/work/OneTimeWorkRequest.Builder.html",target:"_blank",rel:"noopener noreferrer"},Pn=(0,t.Uk)("OneTimeWorkRequest.Builder"),On=(0,t.Uk)("或"),Dn={href:"https://developer.android.google.cn/reference/androidx/work/PeriodicWorkRequest.Builder.html",target:"_blank",rel:"noopener noreferrer"},Ln=(0,t.Uk)("PeriodicWorkRequest.Builder"),Bn={href:"https://developer.android.google.cn/reference/androidx/work/Constraints.html",target:"_blank",rel:"noopener noreferrer"},Fn=(0,t.Uk)("Constraints"),zn=(0,t.Uk)("：指定任务的约束条件（例如，“仅当设备连接到网络时”）。你通过"),Hn={href:"https://developer.android.google.cn/reference/androidx/work/Constraints.Builder.html",target:"_blank",rel:"noopener noreferrer"},Vn=(0,t.Uk)("Constraints.Builder"),Gn=(0,t.Uk)("创建 Constraints对象。在创建WorkRequest之前，传递Constraints 对象给"),Yn=(0,t._)("code",null,"WorkRequest.Builder",-1),Kn={href:"https://developer.android.google.cn/reference/androidx/work/WorkManager.html",target:"_blank",rel:"noopener noreferrer"},Xn=(0,t.Uk)("WorkManager"),Zn=(0,t.Uk)("：对"),Qn=(0,t._)("code",null,"WorkRequest",-1),$n=(0,t.Uk)("进行排队和管理。将WorkRequest对象传递给WorkManager来执行任务。WorkManager以分散系统资源负载的方式调度任务，同时遵守你指定的约束"),ns={href:"https://developer.android.google.cn/reference/androidx/work/WorkStatus.html",target:"_blank",rel:"noopener noreferrer"},ss=(0,t.Uk)("WorkStatus"),as=(0,t.Uk)("：包含有关特定任务的信息。WorkManager为每个WorkRequest对象提供"),ts={href:"https://developer.android.google.cn/reference/android/arch/lifecycle/LiveData.html",target:"_blank",rel:"noopener noreferrer"},ps=(0,t.Uk)("LiveData"),es=(0,t.Uk)("。LiveData保存一个WorkStatus对象；通过观察"),os=(0,t._)("code",null,"LiveData",-1),cs=(0,t.Uk)("，可以确定当前任务的状态，并在任务完成后获得到返回值。"),ls=(0,t.uE)('<p><strong>使用步骤：</strong></p><p>一、继承<code>Worker</code>定义任务</p><p>二、使用<code>WorkRequest</code>配置任务：</p><ol><li>创建任务触发条件</li><li>创建<code>WorkRequest</code>，并设置触发条件</li><li>设置延迟执行任务</li><li>设置退避策略（即任务执行时出现了异常，你希望如何重试该任务）</li><li>给任务设置tag标签</li></ol><p>三、提交任务给系统</p><p>四、观察任务的状态（可主动获取或实时监听）</p><p><img src="https://gitee.com/arcticfox1919/ImageHosting/raw/master/img/2019012020201011.png" alt="img"></p><p><strong>WorkManager有两种工作类型</strong></p><ul><li><code>OneTimeWorkRequest</code> : 一次性任务，成功执行后，便彻底结束。</li><li><code>PeriodicWorkRequest</code>: 周期性任务，按照设定的时间定期执行。</li></ul><p>注意，周期性任务的间隔时间不能少于15分钟。</p>',10),us=(0,t.Uk)("关于WorkManager 的简单使用，参阅官方文档 "),is={href:"https://developer.android.google.cn/topic/libraries/architecture/workmanager/basics.html",target:"_blank",rel:"noopener noreferrer"},rs=(0,t.Uk)("WorkManager 快速入门"),ks=(0,t.Uk)("，关于其版本号，可查询"),ds={href:"https://developer.android.google.cn/jetpack/androidx/releases/work?hl=zh_cn",target:"_blank",rel:"noopener noreferrer"},ms=(0,t.Uk)("版本发布"),bs=(0,t.Uk)("。关于周期性任务的使用流程，与一次性任务大致相同，但需要注意，"),gs=(0,t._)("code",null,"PeriodicWorkRequest",-1),vs=(0,t.Uk)("入队后也会立即执行，所以你如果需要一开始就延迟，应当设置延迟时间"),fs=(0,t.uE)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 设置任务执行时的约束条件</span>\n<span class="token class-name">Constraints</span> constraints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Constraints<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">setRequiresDeviceIdle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">//触发时设备是否为空闲</span>\n        <span class="token punctuation">.</span><span class="token function">setRequiresCharging</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">//触发时设备是否充电</span>\n        <span class="token punctuation">.</span><span class="token function">setRequiredNetworkType</span><span class="token punctuation">(</span><span class="token class-name">NetworkType</span><span class="token punctuation">.</span>UNMETERED<span class="token punctuation">)</span><span class="token comment">//触发时网络状态</span>\n        <span class="token punctuation">.</span><span class="token function">setRequiresBatteryNotLow</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">//指定设备电池是否不应低于临界阈值</span>\n        <span class="token punctuation">.</span><span class="token function">setRequiresStorageNotLow</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">//指定设备可用存储是否不应低于临界阈值</span>\n        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">PeriodicWorkRequest</span> periodicWorkRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PeriodicWorkRequest<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token class-name">MyWorker</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">15</span> <span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">setConstraints</span><span class="token punctuation">(</span>constraints<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 设置任务监听</span>\n<span class="token class-name">WorkManager</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getWorkInfoByIdLiveData</span><span class="token punctuation">(</span>periodicWorkRequest<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WorkInfo</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token annotation punctuation">@Override</span>\n                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onChanged</span><span class="token punctuation">(</span><span class="token class-name">WorkInfo</span> workInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">switch</span> <span class="token punctuation">(</span>workInfo<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                            <span class="token keyword">case</span> RUNNING<span class="token operator">:</span>\n                                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">&quot;WorkManager&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;当前进度 = &quot;</span> <span class="token operator">+</span> workInfo<span class="token punctuation">.</span><span class="token function">getProgress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;Progress&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                                <span class="token keyword">break</span><span class="token punctuation">;</span>\n                            <span class="token keyword">case</span> CANCELLED<span class="token operator">:</span>\n                                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">&quot;WorkManager&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;取消任务&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                                <span class="token keyword">break</span><span class="token punctuation">;</span>\n                            <span class="token keyword">default</span><span class="token operator">:</span>\n                        <span class="token punctuation">}</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">WorkManager</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>periodicWorkRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p><img src="https://gitee.com/arcticfox1919/ImageHosting/raw/master/img/20190120203119855.png" alt="img"></p>',2),hs=(0,t.Uk)("注意，"),ys=(0,t._)("code",null,"Worker",-1),_s=(0,t.Uk)("的父类是"),Is=(0,t._)("code",null,"ListenableWorker",-1),ws=(0,t.Uk)("，其中定义了许多方法，我们可以查看"),qs={href:"https://developer.android.google.cn/reference/androidx/work/ListenableWorker",target:"_blank",rel:"noopener noreferrer"},As=(0,t.Uk)("ListenableWorker文档"),Ss=(0,t.Uk)("了解更多，通过该类，还可以自定义异步任务的实现方式。另外，关于WorkManager 的一些高级用法，请参阅"),xs={href:"https://developer.android.google.cn/topic/libraries/architecture/workmanager/advanced.html",target:"_blank",rel:"noopener noreferrer"},Cs=(0,t.Uk)("WorkManager 高级主题"),Us=(0,t._)("p",null,"使用过程中需要注意：一个Worker最多有十分钟的时间来完成其执行并返回一个Result。在这个时间结束后，Worker将被提示停止。",-1),Ws=(0,t.Uk)("如需在"),Es=(0,t._)("code",null,"WorkManager",-1),Ms=(0,t.Uk)("与"),Ts=(0,t._)("code",null,"Worker",-1),js=(0,t.Uk)("间的传递参数，查看"),Rs={href:"https://developer.android.google.cn/topic/libraries/architecture/workmanager/how-to/define-work#assign_input_data",target:"_blank",rel:"noopener noreferrer"},Js=(0,t.Uk)("这里的示例"),Ns=(0,t.Uk)("，但请注意，Data只能用于传递一些小的基本类型的数据，且数据最大不能超过10KB。"),Ps=(0,t.uE)('<h2 id="broadcast-receiver" tabindex="-1"><a class="header-anchor" href="#broadcast-receiver" aria-hidden="true">#</a> Broadcast Receiver</h2><p>广播是Android中的一种系统级的通信机制。Android中的每个应用程序都可以对自己感兴趣的广播进行注册，这样该程序就只会接收到自己所关心的广播内容，这些广播可能是来自于系统的，也可能是来自于其他应用程序的。Android提供了一套完整的API，允许应用程序自由地发送和接收广播。</p><p>接收广播需要用到一个新的组件——广播接收器（Broadcast Receiver）。</p><p>Android中的广播主要可以分为两种类型：</p><ul><li><p>标准广播</p><p>是一种完全异步执行的广播，在广播发出之后，所有的广播接收器几乎都会在同一时刻接收到这条广播消息，因此它们之间没有任何先后顺序可言。这种广播的效率会比较高，但同时也意味着它是无法被截断的</p></li><li><p>有序广播</p><p>是一种同步执行的广播，在广播发出之后，同一时刻只会有一个广播接收器能够收到这条广播消息，当这个广播接收器中的逻辑执行完毕后，广播才会继续传递。所以此时的广播接收器是有先后顺序的，优先级高的广播接收器就可以先收到广播消息，并且前面的广播接收器还可以截断正在传递的广播，这样后面的广播接收器就无法收到广播消息了。</p></li></ul>',5),Os=(0,t.Uk)("更多广播的细节，请查阅 "),Ds={href:"https://developer.android.google.cn/guide/components/broadcasts",target:"_blank",rel:"noopener noreferrer"},Ls=(0,t.Uk)("广播概览文档"),Bs=(0,t.Uk)("。同时应当熟悉高版本中，系统对广播的限制，查阅 "),Fs={href:"https://developer.android.google.cn/about/versions/oreo/background?hl=zh_cn",target:"_blank",rel:"noopener noreferrer"},zs=(0,t.Uk)("后台执行限制"),Hs=(0,t._)("p",null,"Android内置了很多系统级别的广播，我们可以在应用程序中通过监听这些广播来得到各种系统的状态信息。比如手机开机完成后会发出一条广播，电池的电量发生变化会发出一条广播，时间或时区发生改变也会发出一条广播，等等。如果想要接收到这些广播，就需要使用广播接收器，而要使用广播接收器，必须先对感兴趣的广播进行注册，注册广播的方式有两种：",-1),Vs=(0,t._)("p",null,[(0,t._)("strong",null,"静态注册")],-1),Gs=(0,t.Uk)("在"),Ys=(0,t._)("code",null,"AndroidManifest.xml",-1),Ks=(0,t.Uk)("中通过配置去注册的广播称为静态注册。详细参见 "),Xs={href:"https://developer.android.google.cn/guide/topics/manifest/receiver-element?hl=zh_cn",target:"_blank",rel:"noopener noreferrer"},Zs=(0,t.Uk)("静态注册属性文档"),Qs=(0,t.uE)('<div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>receiver</span>\n    <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.MyReceiver<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    //设置静态优先级 1000\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span> <span class="token attr-name"><span class="token namespace">android:</span>priority</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1000<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>broadcast_test<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>receiver</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',1),$s=(0,t.uE)('<li><p><strong>动态注册</strong></p><p>通过在代码中调用方法去注册，则称为动态注册。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">IntentFilter</span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntentFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfilter<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_SCREEN_ON<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 设置动态广播接收器优先级</span>\nfilter<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token class-name">IntentFilter</span><span class="token punctuation">.</span>SYSTEM_HIGH_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmContext<span class="token punctuation">.</span><span class="token function">registerReceiver</span><span class="token punctuation">(</span>\n    <span class="token keyword">new</span> <span class="token class-name">BroadcastReceiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n       <span class="token annotation punctuation">@Override</span>\n          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token class-name">String</span> action <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_SCREEN_ON<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                  <span class="token function">handleScreenStateChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span> filter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li>',1),na=(0,t.uE)("<p><strong>静态注册与动态注册的区别</strong></p><ol><li>动态注册广播不是常驻型广播，注册与注销必须成对使用，一般在<code>onCreate</code>中注册，<code>onDestroy</code>中注销。如果当前程序的进程并未运行，则不会接收到广播。静态注册是常驻型，也就是说程序并未启动时，如果有广播到来，程序会被系统自动运行。</li><li>当广播为有序广播时，优先级高的先接收（不分静态和动态）。同优先级的广播接收器，则动态优先于静态</li><li>同类型的同优先级的广播接收器，静态：先扫描的优先于后扫描的，动态：先注册的优先于后注册的接收</li><li>当广播为标准广播时，无视优先级，动态注册的优先于静态注册的。</li></ol><p>关于所有的系统广播常量列表，可以去SDK目录下的<code>platforms\\android-29\\data</code>中查看<code>broadcast_actions.txt</code>文件。</p>",3),sa=(0,t.Uk)("Android 8.0及其以上版本中仍可用于静态"),aa={href:"https://developer.android.google.cn/guide/components/broadcast-exceptions?hl=zh_cn",target:"_blank",rel:"noopener noreferrer"},ta=(0,t.Uk)("注册的系统广播"),pa=(0,t._)("h2",{id:"contentprovider",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#contentprovider","aria-hidden":"true"},"#"),(0,t.Uk)(" ContentProvider")],-1),ea=(0,t._)("p",null,"是一个跨进程数据共享组件。除了数据共享，还能实现跨进程的方法调用和通知。Android为常见的一些数据提供了默认的ContentProvider（包括音频、视频、图片、日历和通讯录等）。",-1),oa=(0,t._)("p",null,[(0,t._)("img",{src:"https://gitee.com/arcticfox1919/ImageHosting/raw/master/img/Snipaste_2020-09-06_18-56-59.jpg",alt:"img"})],-1),ca=(0,t.Uk)("Android系统中关于内置的"),la=(0,t._)("code",null,"ContentProvider",-1),ua=(0,t.Uk)("参数，可查询 "),ia={href:"https://developer.android.google.cn/reference/android/provider/package-summary",target:"_blank",rel:"noopener noreferrer"},ra=(0,t.Uk)("provider文档"),ka=(0,t.uE)('<p>以下是一段查询<code>ContentProvider</code>的标准模板代码，查询指定类型的图片</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">getPhotoInfo</span><span class="token punctuation">(</span><span class="token class-name">Context</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Uri</span> imgUri <span class="token operator">=</span> <span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>EXTERNAL_CONTENT_URI<span class="token punctuation">;</span>\n\n    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> proj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>_ID\n            <span class="token punctuation">,</span> <span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>DATA\n            <span class="token punctuation">,</span><span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>SIZE\n            <span class="token punctuation">,</span><span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>DISPLAY_NAME<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Cursor</span> cursor <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        cursor <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>imgUri<span class="token punctuation">,</span>\n                proj<span class="token punctuation">,</span>\n                <span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>MIME_TYPE <span class="token operator">+</span> <span class="token string">&quot;=? or &quot;</span> <span class="token operator">+</span> <span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>MIME_TYPE <span class="token operator">+</span> <span class="token string">&quot;=?&quot;</span><span class="token punctuation">,</span>\n                <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;image/jpeg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;image/png&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>DATE_MODIFIED<span class="token operator">+</span><span class="token string">&quot; desc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span><span class="token punctuation">(</span>cursor <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">while</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">moveToNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">// 图片的路径</span>\n                <span class="token class-name">String</span> path <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">getColumnIndex</span><span class="token punctuation">(</span><span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>DATA<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token comment">// 图标大小</span>\n                <span class="token keyword">int</span> size <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">getColumnIndex</span><span class="token punctuation">(</span><span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">;</span>\n                <span class="token comment">// 图片文件名</span>\n                <span class="token class-name">String</span> displayName <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">getColumnIndex</span><span class="token punctuation">(</span><span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>DISPLAY_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">&quot;AllPhotoInfo&quot;</span><span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> cursor<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>如需要查询所有类型图片，则将查询条件传<code>null</code></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>cursor <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>imgUri<span class="token punctuation">,</span>\n        proj<span class="token punctuation">,</span>\n        <span class="token keyword">null</span><span class="token punctuation">,</span>\n        <span class="token keyword">null</span><span class="token punctuation">,</span>\n        <span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>DATE_MODIFIED<span class="token operator">+</span><span class="token string">&quot; desc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>不要忘记申请权限。在android 6.0及更高版本上，需要动态申请该权限。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android.permission.READ_EXTERNAL_STORAGE<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>除此外，<code>ContentProvider</code>还提供了监听机制，当数据发生变化时，我们可以通过监听器来监听这种变化。</p><p>自定义类继承<code>ContentObserver</code></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyContentObserver</span> <span class="token keyword">extends</span> <span class="token class-name">ContentObserver</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">MyContent</span><span class="token punctuation">(</span><span class="token class-name">Handler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onChange</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> selfChange<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>selfChange<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onChange</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> selfChange<span class="token punctuation">,</span> <span class="token class-name">Uri</span> uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">&quot;MyContentObserver&quot;</span><span class="token punctuation">,</span>uri<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>注册监听器</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerContentObserver</span><span class="token punctuation">(</span>\n    <span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>EXTERNAL_CONTENT_URI<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">MyContentObserver</span><span class="token punctuation">(</span>mHandler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>注意，在适当的时候一定要注销监听器</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unregisterContentObserver</span><span class="token punctuation">(</span>mContentObserver<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',13),da=(0,t.Uk)("更多细节可查询"),ma={href:"https://developer.android.google.cn/reference/android/database/ContentObserver",target:"_blank",rel:"noopener noreferrer"},ba=(0,t.Uk)("ContentObserver 文档"),ga=(0,t.Uk)("，需要注意，"),va=(0,t._)("code",null,"registerContentObserver",-1),fa=(0,t.Uk)("方法有三个参数，其中第一个为需要监听的"),ha=(0,t._)("code",null,"Uri",-1),ya=(0,t.Uk)("，第二个为是否精确匹配，第三个为监听器的实例对象。"),_a=(0,t.uE)('<p>当第二个参数为false 表示精确匹配，例：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>content://bczl.xyz/student\ncontent://bczl.xyz/student/#\ncontent://bczl.xyz/student/home\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果我们监听的Uri是第一个，那么精确匹配情况下，后面两种Uri是不会监听的，因此一般都将此参数设为true</p><p>如需在当前内置存储中通过<code>ContentProvider</code>查询所有文件信息，可以使用如下Uri</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Uri</span> fileUri <span class="token operator">=</span> <span class="token class-name">MediaStore<span class="token punctuation">.</span>Files</span><span class="token punctuation">.</span><span class="token function">getContentUri</span><span class="token punctuation">(</span><span class="token string">&quot;external&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><hr>',6),Ia={},wa=(0,a(3744).Z)(Ia,[["render",function(n,s){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,(0,t._)("p",null,[e,(0,t._)("a",o,[c,(0,t.Wm)(a)])]),(0,t._)("p",null,[l,(0,t._)("a",u,[i,(0,t.Wm)(a)])]),r,(0,t._)("p",null,[k,(0,t._)("a",d,[m,(0,t.Wm)(a)])]),b,(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("p",null,[g,v,f,(0,t._)("a",h,[y,(0,t.Wm)(a)])]),_])]),I,(0,t._)("p",null,[w,(0,t._)("a",q,[A,(0,t.Wm)(a)]),S]),(0,t._)("p",null,[x,(0,t._)("strong",null,[C,U,W,(0,t._)("a",E,[M,(0,t.Wm)(a)]),T,(0,t._)("a",j,[R,(0,t.Wm)(a)])])]),J,(0,t._)("ul",null,[N,(0,t._)("li",null,[(0,t._)("p",null,[(0,t._)("a",P,[O,(0,t.Wm)(a)])]),D]),(0,t._)("li",null,[(0,t._)("p",null,[(0,t._)("a",L,[B,(0,t.Wm)(a)])]),F]),(0,t._)("li",null,[(0,t._)("p",null,[(0,t._)("a",z,[H,(0,t.Wm)(a)])])]),(0,t._)("li",null,[(0,t._)("p",null,[(0,t._)("a",V,[G,(0,t.Wm)(a)])])])]),Y,(0,t._)("p",null,[K,X,(0,t._)("a",Z,[Q,(0,t.Wm)(a)])]),$,(0,t._)("p",null,[nn,(0,t._)("a",sn,[an,(0,t.Wm)(a)])]),tn,(0,t._)("p",null,[pn,en,on,cn,ln,un,rn,kn,dn,mn,bn,(0,t._)("a",gn,[vn,(0,t.Wm)(a)])]),fn,hn,yn,_n,In,(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("a",wn,[qn,(0,t.Wm)(a)]),An]),(0,t._)("li",null,[(0,t._)("a",Sn,[xn,(0,t.Wm)(a)]),Cn,(0,t._)("a",Un,[Wn,(0,t.Wm)(a)]),En,(0,t._)("a",Mn,[Tn,(0,t.Wm)(a)])]),(0,t._)("li",null,[(0,t._)("a",jn,[Rn,(0,t.Wm)(a)]),Jn,(0,t._)("a",Nn,[Pn,(0,t.Wm)(a)]),On,(0,t._)("a",Dn,[Ln,(0,t.Wm)(a)])]),(0,t._)("li",null,[(0,t._)("a",Bn,[Fn,(0,t.Wm)(a)]),zn,(0,t._)("a",Hn,[Vn,(0,t.Wm)(a)]),Gn,Yn]),(0,t._)("li",null,[(0,t._)("a",Kn,[Xn,(0,t.Wm)(a)]),Zn,Qn,$n]),(0,t._)("li",null,[(0,t._)("a",ns,[ss,(0,t.Wm)(a)]),as,(0,t._)("a",ts,[ps,(0,t.Wm)(a)]),es,os,cs])]),ls,(0,t._)("p",null,[us,(0,t._)("a",is,[rs,(0,t.Wm)(a)]),ks,(0,t._)("a",ds,[ms,(0,t.Wm)(a)]),bs,gs,vs]),fs,(0,t._)("p",null,[hs,ys,_s,Is,ws,(0,t._)("a",qs,[As,(0,t.Wm)(a)]),Ss,(0,t._)("a",xs,[Cs,(0,t.Wm)(a)])]),Us,(0,t._)("p",null,[Ws,Es,Ms,Ts,js,(0,t._)("a",Rs,[Js,(0,t.Wm)(a)]),Ns]),Ps,(0,t._)("p",null,[Os,(0,t._)("a",Ds,[Ls,(0,t.Wm)(a)]),Bs,(0,t._)("a",Fs,[zs,(0,t.Wm)(a)])]),Hs,(0,t._)("ul",null,[(0,t._)("li",null,[Vs,(0,t._)("p",null,[Gs,Ys,Ks,(0,t._)("a",Xs,[Zs,(0,t.Wm)(a)])]),Qs]),$s]),na,(0,t._)("p",null,[sa,(0,t._)("a",aa,[ta,(0,t.Wm)(a)])]),pa,ea,oa,(0,t._)("p",null,[ca,la,ua,(0,t._)("a",ia,[ra,(0,t.Wm)(a)])]),ka,(0,t._)("p",null,[da,(0,t._)("a",ma,[ba,(0,t.Wm)(a)]),ga,va,fa,ha,ya]),_a],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);