"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[862],{9895:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-28dc5a2c",path:"/study/16.%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"网络层面:",slug:"网络层面",children:[{level:3,title:"减少http请求 合并请求;",slug:"减少http请求-合并请求",children:[]},{level:3,title:"压缩资源",slug:"压缩资源",children:[]},{level:3,title:"gzip压缩",slug:"gzip压缩",children:[]},{level:3,title:"使用CDN",slug:"使用cdn",children:[]},{level:3,title:"避免空src或者是href值",slug:"避免空src或者是href值",children:[]},{level:3,title:"CSS放在顶部，JS放在底部",slug:"css放在顶部-js放在底部",children:[]},{level:3,title:"强缓存与协商缓存",slug:"强缓存与协商缓存",children:[]},{level:3,title:"懒加载",slug:"懒加载",children:[]}]},{level:2,title:"浏览器层面:",slug:"浏览器层面",children:[{level:3,title:"减少重排reflow、重绘repaint;",slug:"减少重排reflow、重绘repaint",children:[{level:5,title:"transform层创立的条件如下：",slug:"transform层创立的条件如下",children:[]}]}]},{level:2,title:"代码层面:",slug:"代码层面",children:[]}],filePathRelative:"study/16.前端性能/前端优化.md",git:{updatedTime:1643448789e3}}},6150:(s,n,a)=>{a.r(n),a.d(n,{default:()=>p});const e=(0,a(6252).uE)('<p>前端优化:</p><p>https://alienzhou.github.io/fe-performance-journey/</p><h2 id="网络层面" tabindex="-1"><a class="header-anchor" href="#网络层面" aria-hidden="true">#</a> 网络层面:</h2><h3 id="减少http请求-合并请求" tabindex="-1"><a class="header-anchor" href="#减少http请求-合并请求" aria-hidden="true">#</a> 减少http请求 合并请求;</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">1.</span>使用字体图标<span class="token punctuation">;</span>\n<span class="token number">2.</span>小图片压缩base64<span class="token punctuation">;</span>\n<span class="token number">3.</span>合并css文件<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="压缩资源" tabindex="-1"><a class="header-anchor" href="#压缩资源" aria-hidden="true">#</a> 压缩资源</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>压缩js<span class="token punctuation">,</span>css<span class="token punctuation">,</span>image\njs<span class="token punctuation">,</span>css进行压缩减少冗余<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="gzip压缩" tabindex="-1"><a class="header-anchor" href="#gzip压缩" aria-hidden="true">#</a> gzip压缩</h3><h3 id="使用cdn" tabindex="-1"><a class="header-anchor" href="#使用cdn" aria-hidden="true">#</a> 使用CDN</h3><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>https://www.w3.org/TR/resource-hints/#preconnect\n// 预先解析域名\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dns-prefetch<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>//baidu.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> \n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preconnect<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>//sample.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="避免空src或者是href值" tabindex="-1"><a class="header-anchor" href="#避免空src或者是href值" aria-hidden="true">#</a> 避免空src或者是href值</h3><h3 id="css放在顶部-js放在底部" tabindex="-1"><a class="header-anchor" href="#css放在顶部-js放在底部" aria-hidden="true">#</a> CSS放在顶部，JS放在底部</h3><h3 id="强缓存与协商缓存" tabindex="-1"><a class="header-anchor" href="#强缓存与协商缓存" aria-hidden="true">#</a> 强缓存与协商缓存</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>from disk <span class="token function">cache</span><span class="token punctuation">(</span>磁盘缓存<span class="token punctuation">)</span>、\nfrom memory <span class="token function">cache</span><span class="token punctuation">(</span>内存缓存<span class="token punctuation">)</span>、\n读取缓存的顺序为<span class="token operator">:</span>\nmemory –<span class="token operator">&gt;</span> disk\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Expires:\n用来指定资源到期的时间，是服务器端的具体的时间点。\nExpires=max-age + 请求时间，需要和Last-modified结合使用。\n缺点:\nExpires 是 HTTP/1 的产物，受限于本地时间，如果修改了本地时间，可能会造成缓存失效。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code> Cache-Control:\n 在HTTP/1.1中，Cache-Control是最重要的规则，主要用于控制网页缓存，主要取值为：\npublic：所有内容都将被缓存（客户端和代理服务器都可缓存）\nprivate：所有内容只有客户端可以缓存，Cache-Control的默认取值\nno-cache：客户端缓存内容，但是是否使用缓存则需要经过协商缓存来验证决定(是否与后端保持一至)\nno-store：所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存\nmax-age=xxx (xxx is numeric)：缓存内容将在xxx秒后失效\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>协商缓存:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Last-Modified和If-Modified-Since\n浏览器首先发送一个请求，让服务端在response header中返回请求的资源上次更新时间，就是last-modified，浏览器会缓存下这个时间。\n然后浏览器再下次请求中，request header中带上if-modified-since:[保存的last-modified的值]。根据浏览器发送的修改时间和服务端的修改时间进行比对，一致的话代表资源没有改变，服务端返回正文为空的响应，让浏览器中缓存中读取资源，这就大大减小了请求的消耗。\n由于last-modified依赖的是保存的绝对时间，还是会出现误差的情况：\n\n保存的时间是以秒为单位的，1秒内多次修改是无法捕捉到的；\n各机器读取到的时间不一致，就有出现误差的可能性。为了改善这个问题，提出了使用etag。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>ETag和If<span class="token operator">-</span>None<span class="token operator">-</span>Match\n\netag是http协议提供的若干机制中的一种Web缓存验证机制，并且允许客户端进行缓存协商。生成etag常用的方法包括对资源内容使用抗碰撞散列函数，使用最近修改的时间戳的哈希值，甚至只是一个版本号。 和last<span class="token operator">-</span>modified一样<span class="token punctuation">.</span>\n\n浏览器会先发送一个请求得到etag的值，然后再下一次请求在request header中带上<span class="token keyword">if</span><span class="token operator">-</span>none<span class="token operator">-</span>match<span class="token operator">:</span><span class="token punctuation">[</span>保存的etag的值<span class="token punctuation">]</span>。\n通过发送的etag的值和服务端重新生成的etag的值进行比对，如果一致代表资源没有改变，服务端返回正文为空的响应，告诉浏览器从缓存中读取资源。\netag能够解决last<span class="token operator">-</span>modified的一些缺点，但是etag每次服务端生成都需要进行读写操作，而last<span class="token operator">-</span>modified只需要读取操作，从这方面来看，etag的消耗是更大的。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><img src="前端优化.assets/89dbabaf7645420484af0d21b7c56905.jpeg" alt="img"></p><h3 id="懒加载" tabindex="-1"><a class="header-anchor" href="#懒加载" aria-hidden="true">#</a> 懒加载</h3><h2 id="浏览器层面" tabindex="-1"><a class="header-anchor" href="#浏览器层面" aria-hidden="true">#</a> 浏览器层面:</h2><h3 id="减少重排reflow、重绘repaint" tabindex="-1"><a class="header-anchor" href="#减少重排reflow、重绘repaint" aria-hidden="true">#</a> 减少重排reflow、重绘repaint;</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>1.尽量减少频繁的增加,修改,删除元素;\n2.尽量通过class来设计元素样式，切忌用style 多次操作单个属性;\n3.尽量用transform\n\t浏览器会针对transform开启GPU加速;\n\ttransform 属于合成属性（composite property),\n\t对合成属性进行 transition/animation \n\t动画将会创建一个合成层（composite layer），\n\t这使得被动画元素在一个独立的层中进行动画。不会引起reflow和repaint.\n\t\n\tcss动画触发过程:reflow repaint composite\n\t(will-change: transform;提升为合成层)\n\t\n4.dom操作改为&quot;离线&quot;执行;\n\tdocumentFragment;\n\tdisplay\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h5 id="transform层创立的条件如下" tabindex="-1"><a class="header-anchor" href="#transform层创立的条件如下" aria-hidden="true">#</a> transform层创立的条件如下：</h5><ul><li>3D 或透视变换 CSS 属性</li><li>使用加速视频解码的 元素</li><li>拥有 3D (WebGL) 上下文或加速的 2D 上下文的 元素</li><li>复合插件(如 Flash)</li><li>进行 opacity/transform 动画的元素</li><li>拥有加速 CSS filters 的元素</li><li>元素有一个包含复合层的后代节点(换句话说，就是一个元素拥有一个子元素，该子元素在自己的层里)</li><li>元素有一个 z-index 较低且包含一个复合层的兄弟元素(换句话说就是该元素在复合层上面渲染)</li></ul><p>​</p><h2 id="代码层面" tabindex="-1"><a class="header-anchor" href="#代码层面" aria-hidden="true">#</a> 代码层面:</h2><ul><li><p>js</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>defer 会在 <span class="token constant">HTML</span> 解析完成后，按照脚本出现的次序再顺序执行；\n<span class="token keyword">async</span> 则是下载完成就立即开始执行，同时阻塞页面解析，不保证脚本间的执行顺序；\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><p>优化方式</p><p>懒加载</p><p>repload</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>link标签中  更早加载此文件\n\n<span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">&quot;preload&quot;</span> href<span class="token operator">=</span><span class="token string">&quot;../vue.js&quot;</span> <span class="token keyword">as</span><span class="token operator">=</span><span class="token string">&quot;script&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>prefetch</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>闲时加载 非首页需要资源 或\nPredictive prefetch\n\n<span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">&quot;prefetch&quot;</span> href<span class="token operator">=</span><span class="token string">&quot;../vue.js&quot;</span> <span class="token keyword">as</span><span class="token operator">=</span><span class="token string">&quot;script&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>cache</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>数据压缩优化</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Broti\n 开源数据压缩程序库\n 专为HTTP传输优化\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>HTTP2.0 终究办法\n\t头文件压缩\n\tHPACK\n\t\nCookie-less domain\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Minification\n 牺牲代码可读性<span class="token punctuation">,</span>减少文件体积\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',41),l={},p=(0,a(3744).Z)(l,[["render",function(s,n){return e}]])},3744:(s,n)=>{n.Z=(s,n)=>{const a=s.__vccOpts||s;for(const[s,e]of n)a[s]=e;return a}}}]);