"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[346],{9862:(s,n,e)=>{e.r(n),e.d(n,{data:()=>a});const a={key:"v-0b92bf9a",path:"/study/10.Vue/VUE3.html",title:"Vue3.0",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"vue3特点",slug:"vue3特点",children:[]},{level:2,title:"Proxy Reflect",slug:"proxy-reflect",children:[]},{level:2,title:"Ref toRef toRefs",slug:"ref-toref-torefs",children:[{level:3,title:"Ref Reactive",slug:"ref-reactive",children:[]},{level:3,title:"toRef",slug:"toref",children:[]},{level:3,title:"toRefs",slug:"torefs",children:[]}]}],filePathRelative:"study/10.Vue/VUE3.md",git:{updatedTime:164208313e4}}},3929:(s,n,e)=>{e.r(n),e.d(n,{default:()=>r});const a=(0,e(6252).uE)('<h1 id="vue3-0" tabindex="-1"><a class="header-anchor" href="#vue3-0" aria-hidden="true">#</a> Vue3.0</h1><h2 id="vue3特点" tabindex="-1"><a class="header-anchor" href="#vue3特点" aria-hidden="true">#</a> vue3特点</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">1.</span>改用Proxy实现响应式<span class="token punctuation">;</span> proxy取代Object<span class="token punctuation">.</span>deFineProperty<span class="token punctuation">;</span>\n<span class="token number">2.</span>compositionApi<span class="token operator">:</span>可以将同一个功能的逻辑，组织在一个函数内部，利于维护。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="proxy-reflect" tabindex="-1"><a class="header-anchor" href="#proxy-reflect" aria-hidden="true">#</a> Proxy Reflect</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">1.</span>在深度监听，性能更好：\n\t Object<span class="token punctuation">.</span>defineProperty： 深度监听需要一次性递归；\n\t Proxy：递归实现深度监听，但是是在<span class="token keyword">get</span>时递归的；\n<span class="token number">2.</span>可以监听 新增<span class="token operator">/</span>删除 属性：\n\t\tObject<span class="token punctuation">.</span>defineProperty：<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>；\n\t\tProxy：新增触发<span class="token keyword">set</span>，删除触发deleteProperty<span class="token punctuation">;</span>\n<span class="token number">3.</span>可监听数组变化：\n\t\tObject<span class="token punctuation">.</span>defineProperty：重写数组方法，实现监听；\n\t\tProxy：新增触发<span class="token keyword">get</span>、<span class="token keyword">set</span>，删除触发deleteProperty<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="ref-toref-torefs" tabindex="-1"><a class="header-anchor" href="#ref-toref-torefs" aria-hidden="true">#</a> Ref toRef toRefs</h2><h3 id="ref-reactive" tabindex="-1"><a class="header-anchor" href="#ref-reactive" aria-hidden="true">#</a> Ref Reactive</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n用于创建简单类型的响应式对象\n用来定义对象数组的响应式\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="toref" tabindex="-1"><a class="header-anchor" href="#toref" aria-hidden="true">#</a> toRef</h3><p>https://v3.cn.vuejs.org/api/refs-api.html#toref</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>toRef是对ref数据的引用\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="torefs" tabindex="-1"><a class="header-anchor" href="#torefs" aria-hidden="true">#</a> toRefs</h3><p>https://v3.cn.vuejs.org/api/refs-api.html#torefs</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>防止解构失去响应式；\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',14),t={},r=(0,e(3744).Z)(t,[["render",function(s,n){return a}]])},3744:(s,n)=>{n.Z=(s,n)=>{const e=s.__vccOpts||s;for(const[s,a]of n)e[s]=a;return e}}}]);